diff -rNu gcc-3.4.3/configure.in gcc-3.4.3-aros/configure.in
--- gcc-3.4.3/configure.in	2004-11-04 18:05:20.000000000 +0100
+++ gcc-3.4.3-aros/configure.in	2005-01-20 17:31:07.000000000 +0100
@@ -298,6 +298,9 @@
   ppc*-*-pe)
     noconfigdirs="patch diff make tk tcl expect dejagnu autoconf automake texinfo bison send-pr gprof rcs guile perl itcl tix gnuserv"
     ;;
+  *-*-aros*)
+    noconfigdirs="patch diff make tk tcl expect dejagnu autoconf automake texinfo bison send-pr gprof rcs guile perl itcl tix gnuserv gdb"
+    ;;
   powerpc-*-beos*)
     noconfigdirs="$noconfigdirs tk itcl tix libgui gdb dejagnu readline"
     ;;
@@ -1153,6 +1156,8 @@
   *-*-sysv4*)
     host_makefile_frag="config/mh-sysv4"
     ;;
+  *-*-aros*)
+    ;;
 esac
 fi
 
diff -rNu gcc-3.4.3/gcc/c-incpath.c gcc-3.4.3-aros/gcc/c-incpath.c
--- gcc-3.4.3/gcc/c-incpath.c	2004-05-31 12:37:47.000000000 +0200
+++ gcc-3.4.3-aros/gcc/c-incpath.c	2005-01-20 18:04:33.000000000 +0100
@@ -35,7 +35,7 @@
 # define INO_T_EQ(A, B) (!memcmp (&(A), &(B), sizeof (A)))
 # define INO_T_COPY(DEST, SRC) memcpy(&(DEST), &(SRC), sizeof (SRC))
 #else
-# if (defined _WIN32 && ! defined (_UWIN)) || defined __MSDOS__
+# if (defined _WIN32 && ! defined (_UWIN)) || defined __MSDOS__ || defined __AROS__
 #  define INO_T_EQ(A, B) 0
 # else
 #  define INO_T_EQ(A, B) ((A) == (B))
diff -rNu gcc-3.4.3/gcc/config/aros.h gcc-3.4.3-aros/gcc/config/aros.h
--- gcc-3.4.3/gcc/config/aros.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-3.4.3-aros/gcc/config/aros.h	2005-01-20 17:02:48.000000000 +0100
@@ -0,0 +1,96 @@
+/* Definitions for AROS
+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
+   Contributed by Fabio Alemagna
+   Based upon linux.h, contributed by Eric Youngdale.
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* Don't assume anything about the header files.  */
+#define NO_IMPLICIT_EXTERN_C
+
+/* AROS uses ctype from libc.a. I am not sure how complete it is.
+   For now, we play safe. It may change later.  */
+
+#if 0
+#undef MULTIBYTE_CHARS
+#define MULTIBYTE_CHARS 1
+#endif
+
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+	builtin_define_std ("unix");		\
+	builtin_define_std ("AROS");            \
+	builtin_define ("__ELF__");		\
+	builtin_assert ("system=posix");	\
+	if (flag_pic)				\
+	  {					\
+	    builtin_define ("__PIC__");		\
+	    builtin_define ("__pic__");		\
+	  }					\
+    }						\
+  while (0)
+
+#undef ASM_APP_ON
+#define ASM_APP_ON "#APP\n"
+
+#undef ASM_APP_OFF
+#define ASM_APP_OFF "#NO_APP\n"
+
+#undef MD_EXEC_PREFIX
+#undef MD_STARTFILE_PREFIX
+
+/* Provide a STARTFILE_SPEC appropriate for AROS. AROS has its own
+   set of startup files which also take care of handling C++
+   constructors/destructors.  */
+
+#undef	STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "%{detach:detach.o%s} startup.o%s %{nix:nixmain.o%s}"
+
+/* Provide a ENDFILE_SPEC appropriate for AROS. */
+
+#undef	ENDFILE_SPEC
+#define ENDFILE_SPEC \
+  "-lautoinit"
+
+/* This is for -profile to use -lc_p instead of -lc.  */
+#ifndef CC1_SPEC
+#define CC1_SPEC "%{profile:-p}"
+#endif
+
+/* The GNU C++ standard library requires that these macros be defined.  */
+#undef CPLUSPLUS_CPP_SPEC
+#define CPLUSPLUS_CPP_SPEC "-D_GNU_SOURCE %(cpp)"
+
+#undef	LIB_SPEC
+#define LIB_SPEC \
+  "-lamiga -larossupport -larosc -lm"
+
+#if !defined(USE_GNULIBC_1) && defined(HAVE_LD_EH_FRAME_HDR)
+#define LINK_EH_SPEC "%{!static:--eh-frame-hdr} "
+#endif
+
+/* AROS uses its own collect-like program for the moment.  */
+#undef LINKER_NAME
+#define LINKER_NAME "collect-aros"
+
+/* Define this so we can compile MS code for use with WINE.  */
+#define HANDLE_PRAGMA_PACK_PUSH_POP
+
+#define TARGET_HAS_F_SETLKW
diff -rNu gcc-3.4.3/gcc/config/i386/aros.h gcc-3.4.3-aros/gcc/config/i386/aros.h
--- gcc-3.4.3/gcc/config/i386/aros.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-3.4.3-aros/gcc/config/i386/aros.h	2005-01-20 19:59:20.000000000 +0100
@@ -0,0 +1,120 @@
+/* Definitions for Intel 386 running AROS systems with ELF format.
+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002
+   Free Software Foundation, Inc.
+   Contributed by Fabio Alemagna.
+   Based upon i386/linux.h by Eric Youngdale.
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* Output at beginning of assembler file.  */
+/* The .file command should always begin the output.  */
+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE
+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true
+
+#define TARGET_VERSION fprintf (stderr, " (i386 AROS/ELF)");
+
+/* The svr4 ABI for the i386 says that records and unions are returned
+   in memory.  */
+#undef DEFAULT_PCC_STRUCT_RETURN
+#define DEFAULT_PCC_STRUCT_RETURN 1
+
+#undef ASM_COMMENT_START
+#define ASM_COMMENT_START "#"
+
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(n) \
+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])
+
+/* Output assembler code to FILE to call the profiler.
+   To the best of my knowledge, no Linux libc has required the label
+   argument to mcount.  */
+
+#define NO_PROFILE_COUNTERS 1
+
+#undef MCOUNT_NAME
+#define MCOUNT_NAME "mcount"
+
+/* The GLIBC version of mcount for the x86 assumes that there is a
+   frame, so we cannot allow profiling without a frame pointer.  */
+
+#undef SUBTARGET_FRAME_POINTER_REQUIRED
+#define SUBTARGET_FRAME_POINTER_REQUIRED current_function_profile
+
+#undef SIZE_TYPE
+#define SIZE_TYPE "unsigned int"
+
+#undef PTRDIFF_TYPE
+#define PTRDIFF_TYPE "int"
+
+#undef WCHAR_TYPE
+#define WCHAR_TYPE "long int"
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE BITS_PER_WORD
+
+#undef CPP_SPEC
+#define CPP_SPEC "%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}"
+
+#undef CC1_SPEC
+#define CC1_SPEC "%(cc1_cpu) %{profile:-p}"
+
+/* Provide a LINK_SPEC appropriate for AROS.  */
+
+#undef	LINK_SPEC
+#define LINK_SPEC "-m elf_i386"
+
+/* A C statement (sans semicolon) to output to the stdio stream
+   FILE the assembler definition of uninitialized global DECL named
+   NAME whose size is SIZE bytes and alignment is ALIGN bytes.
+   Try to use asm_output_aligned_bss to implement this macro.  */
+
+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \
+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)
+
+/* A C statement to output to the stdio stream FILE an assembler
+   command to advance the location counter to a multiple of 1<<LOG
+   bytes if it is within MAX_SKIP bytes.
+
+   This is used to align code labels according to Intel recommendations.  */
+
+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN
+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP)			\
+  do {									\
+    if ((LOG) != 0) {							\
+      if ((MAX_SKIP) == 0) fprintf ((FILE), "\t.p2align %d\n", (LOG));	\
+      else fprintf ((FILE), "\t.p2align %d,,%d\n", (LOG), (MAX_SKIP));	\
+    }									\
+  } while (0)
+#endif
+
+/* Handle special EH pointer encodings.  Absolute, pc-relative, and
+   indirect are handled automatically.  */
+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \
+  do {									\
+    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)		\
+      {									\
+        fputs (ASM_LONG, FILE);			\
+        assemble_name (FILE, XSTR (ADDR, 0));				\
+	fputs (((ENCODING) & DW_EH_PE_indirect ? "@GOT" : "@GOTOFF"), FILE); \
+        goto DONE;							\
+      }									\
+  } while (0)
+
+
+/* FIXME: AROS doesn't support dw2 unwinding yet.  */
+#undef MD_FALLBACK_FRAME_STATE_FOR
diff -rNu gcc-3.4.3/gcc/config/t-aros gcc-3.4.3-aros/gcc/config/t-aros
--- gcc-3.4.3/gcc/config/t-aros	1970-01-01 01:00:00.000000000 +0100
+++ gcc-3.4.3-aros/gcc/config/t-aros	2005-01-20 17:03:08.000000000 +0100
@@ -0,0 +1,2 @@
+#AROS doesn't use collect2 at all, it doesn't even have to be built
+USE_COLLECT2 :=
\ No newline at end of file
diff -rNu gcc-3.4.3/gcc/config.gcc gcc-3.4.3-aros/gcc/config.gcc
--- gcc-3.4.3/gcc/config.gcc	2004-09-08 17:16:10.000000000 +0200
+++ gcc-3.4.3-aros/gcc/config.gcc	2005-01-20 17:45:45.000000000 +0100
@@ -511,6 +511,27 @@
       ;;
   esac
   ;;
+*-*-aros*)
+  # On AROS, the setup is just about the same on
+  # each different CPU.  The specific machines that we
+  # support are matched above and just set $cpu_type.
+  ##xm_defines=POSIX
+  ##tm_file="${cpu_type}/gnu.h"
+  ##extra_parts="crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"
+  # AROS always uses ELF.
+  elf=yes
+  # GNU tools are the only tools.
+  gnu_ld=yes
+  gas=yes
+  thread_file=single
+  use_collect2=
+  xm_defines='STDC_HEADERS=1'
+  # These details are the same as for Linux.
+  # But here we need a little extra magic.
+  ##tmake_file="t-slibgcc-elf-ver t-linux t-gnu"
+  tmake_file="t-aros"
+  ;;
+
 *-*-openbsd*)
   tmake_file="t-libc-ok t-openbsd t-libgcc-pic"
   case ${enable_threads} in
@@ -1005,6 +1026,9 @@
 	float_format=i386
 	use_fixproto=no
 	;;
+i[34567]86-*-aros*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h aros.h i386/aros.h"
+	;;	
 i[34567]86-*-gnu*)
 	;;
 i[34567]86-pc-msdosdjgpp*)
diff -rNu gcc-3.4.3/libiberty/configure gcc-3.4.3-aros/libiberty/configure
--- gcc-3.4.3/libiberty/configure	2003-10-01 19:11:29.000000000 +0200
+++ gcc-3.4.3-aros/libiberty/configure	2005-01-20 20:48:11.735486048 +0100
@@ -5683,6 +5683,7 @@
      *-*-msdosdjgpp*)		pexecute=pex-djgpp.o  ;;
      *-*-msdos*)		pexecute=pex-msdos.o  ;;
      *-*-os2-emx*)		pexecute=pex-os2.o    ;;
+     *-*-aros*)			pexecute=pex-aros.o   ;;
      *)				pexecute=pex-unix.o   ;;
 esac
 
diff -rNu gcc-3.4.3/libiberty/configure.ac gcc-3.4.3-aros/libiberty/configure.ac
--- gcc-3.4.3/libiberty/configure.ac	2004-01-10 03:17:41.000000000 +0100
+++ gcc-3.4.3-aros/libiberty/configure.ac	2005-01-20 20:48:24.000000000 +0100
@@ -481,6 +481,7 @@
      *-*-msdosdjgpp*)		pexecute=pex-djgpp.o  ;;
      *-*-msdos*)		pexecute=pex-msdos.o  ;;
      *-*-os2-emx*)		pexecute=pex-os2.o    ;;
+     *-*-aros*)			pexecute=pex-aros.o   ;;
      *)				pexecute=pex-unix.o   ;;
 esac
 AC_SUBST(pexecute)
diff -rNu gcc-3.4.3/libiberty/Makefile.in gcc-3.4.3-aros/libiberty/Makefile.in
--- gcc-3.4.3/libiberty/Makefile.in	2004-01-14 22:27:28.000000000 +0100
+++ gcc-3.4.3-aros/libiberty/Makefile.in	2005-01-20 18:16:17.000000000 +0100
@@ -144,7 +144,7 @@
 	objalloc.c obstack.c						\
 	partition.c							\
 	 pex-djgpp.c pex-mpw.c pex-msdos.c pex-os2.c			\
-	 pex-unix.c pex-win32.c						\
+	 pex-unix.c pex-win32.c pex-aros.c				\
          physmem.c putenv.c						\
 	random.c regex.c rename.c rindex.c				\
 	safe-ctype.c setenv.c sigsetmask.c snprintf.c sort.c spaces.c	\
@@ -188,7 +188,7 @@
 	index.o insque.o						\
 	memchr.o memcmp.o memcpy.o memmove.o mempcpy.o memset.o mkstemps.o \
 	pex-djgpp.o pex-mpw.o pex-msdos.o pex-os2.o			\
-	 pex-unix.o pex-win32.o						\
+	 pex-unix.o pex-win32.o pex-aros.o				\
 	 putenv.o							\
 	random.o rename.o rindex.o					\
 	setenv.o sigsetmask.o snprintf.o stpcpy.o stpncpy.o strcasecmp.o \
@@ -483,6 +483,8 @@
 	$(srcdir)/pex-common.h
 pex-win32.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
 	$(srcdir)/pex-common.h
+pex-aros.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
+	$(srcdir)/pex-common.h
 physmem.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
 putenv.o: config.h $(INCDIR)/ansidecl.h
 random.o: $(INCDIR)/ansidecl.h
diff -rNu gcc-3.4.3/libiberty/pex-aros.c gcc-3.4.3-aros/libiberty/pex-aros.c
--- gcc-3.4.3/libiberty/pex-aros.c	1970-01-01 01:00:00.000000000 +0100
+++ gcc-3.4.3-aros/libiberty/pex-aros.c	2005-01-20 18:10:35.000000000 +0100
@@ -0,0 +1,70 @@
+/* Utilities to execute a program in a subprocess (possibly linked by pipes
+   with other subprocesses), and wait for it.  OS/2 specialization.
+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003
+   Free Software Foundation, Inc.
+
+This file is part of the libiberty library.
+Libiberty is free software; you can redistribute it and/or
+modify it under the terms of the GNU Library General Public
+License as published by the Free Software Foundation; either
+version 2 of the License, or (at your option) any later version.
+
+Libiberty is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Library General Public License for more details.
+
+You should have received a copy of the GNU Library General Public
+License along with libiberty; see the file COPYING.LIB.  If not,
+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#include "pex-common.h"
+
+#include <process.h>
+#include <errno.h>
+
+static int __pid, __rc;
+
+int
+pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)
+     const char *program;
+     char * const *argv;
+     const char *this_pname;
+     const char *temp_base;
+     char **errmsg_fmt, **errmsg_arg;
+     int flags;
+{
+  if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)
+    {
+      *errmsg_fmt = "-pipe not supported yet.";
+      *errmsg_arg = NULL;
+      return -1;
+    }
+
+  __rc = ((flags & PEXECUTE_SEARCH) ? spawnvp : spawnv) (P_WAIT, program, argv);
+  if (__rc == -1)
+    {
+      *errmsg_fmt = install_error_msg;
+      *errmsg_arg = program;
+      return -1;
+    }
+
+  return (__pid <= 0) ? __pid = 100 : ++__pid;
+}
+
+int
+pwait (pid, status, flags)
+     int pid;
+     int *status;
+     int flags;
+{
+  if (pid != __pid)
+    {
+      errno = EINVAL;
+      return -1;
+    }
+
+  *status = (__rc & 0xFF) << 8;
+  return __pid;
+}
