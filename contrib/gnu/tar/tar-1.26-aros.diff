diff -ur tar-1.26.orig//gnu/fcntl.c tar-1.26/gnu/fcntl.c
--- tar-1.26.orig//gnu/fcntl.c	2011-03-12 04:14:28.000000000 -0500
+++ tar-1.26/gnu/fcntl.c	2011-12-10 12:13:00.000000000 -0500
@@ -34,6 +34,15 @@
 #endif
 #undef fcntl
 
+#ifdef __AROS__
+/* This is needed due to the conflicting version
+ * of getdtablesize from bsdsocket.library, which
+ * only counts the number of socket descriptors.
+ */
+#undef getdtablesize
+#define getdtablesize() 256
+#endif
+
 #if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
 /* Get declarations of the Win32 API functions.  */
 # define WIN32_LEAN_AND_MEAN
diff -ur tar-1.26.orig//lib/rtapelib.c tar-1.26/lib/rtapelib.c
--- tar-1.26.orig//lib/rtapelib.c	2010-09-14 06:06:44.000000000 -0400
+++ tar-1.26/lib/rtapelib.c	2011-03-12 04:50:18.000000000 -0500
@@ -97,7 +97,7 @@
 
 /* If true, always consider file names to be local, even if they contain
    colons */
-bool force_local_option;
+bool force_local_option = true;
 
 
 
@@ -424,10 +424,12 @@
 	}
   }
 
+#ifndef __AROS__
   /* FIXME: Should somewhat validate the decoding, here.  */
   if (gethostbyname (remote_host) == NULL)
     error (EXIT_ON_EXEC_ERROR, 0, _("Cannot connect to %s: resolve failed"),
 	   remote_host);
+#endif
 
   if (remote_user && *remote_user == '\0')
     remote_user = 0;
@@ -477,7 +479,7 @@
 	return -1;
       }
 
-    status = fork ();
+    status = vfork ();
     if (status == -1)
       {
 	int e = errno;
diff -ur tar-1.26.orig//src/misc.c tar-1.26/src/misc.c
--- tar-1.26.orig//src/misc.c	2011-02-16 17:12:16.000000000 -0500
+++ tar-1.26/src/misc.c	2011-03-12 04:50:18.000000000 -0500
@@ -866,7 +866,7 @@
 pid_t
 xfork (void)
 {
-  pid_t p = fork ();
+  pid_t p = vfork ();
   if (p == (pid_t) -1)
     call_arg_fatal ("fork", _("child process"));
   return p;
@@ -899,7 +899,7 @@
 void *
 page_aligned_alloc (void **ptr, size_t size)
 {
-  size_t alignment = getpagesize ();
+  size_t alignment = 2048;
   size_t size1 = size + alignment;
   if (size1 < size)
     xalloc_die ();
diff -ur tar-1.26.orig//src/system.c tar-1.26/src/system.c
--- tar-1.26.orig//src/system.c	2010-11-05 04:16:25.000000000 -0400
+++ tar-1.26/src/system.c	2011-03-12 04:50:18.000000000 -0500
@@ -190,7 +190,9 @@
   const char *shell = getenv ("SHELL");
   if (! shell)
     shell = "/bin/sh";
-  child = xfork ();
+  child = vfork ();
+  if (child == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
   if (child == 0)
     {
       priv_set_restore_linkdir ();
@@ -319,7 +321,9 @@
   pid_t child_pid;
 
   xpipe (parent_pipe);
-  child_pid = xfork ();
+  child_pid = vfork ();
+  if (child_pid == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
 
   if (child_pid > 0)
     {
@@ -372,7 +376,9 @@
   /* We do need a grandchild tar.  */
 
   xpipe (child_pipe);
-  grandchild_pid = xfork ();
+  grandchild_pid = vfork ();
+  if (grandchild_pid == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
 
   if (grandchild_pid == 0)
     {
@@ -488,7 +494,9 @@
   pid_t child_pid;
 
   xpipe (parent_pipe);
-  child_pid = xfork ();
+  child_pid = vfork ();
+  if (child_pid == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
 
   if (child_pid > 0)
     {
@@ -530,7 +538,9 @@
   /* We do need a grandchild tar.  */
 
   xpipe (child_pipe);
-  grandchild_pid = xfork ();
+  grandchild_pid = vfork ();
+  if (grandchild_pid == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
 
   if (grandchild_pid == 0)
     {
@@ -708,7 +718,9 @@
 
   xpipe (p);
   pipe_handler = signal (SIGPIPE, SIG_IGN);
-  global_pid = xfork ();
+  global_pid = vfork ();
+  if (global_pid == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
 
   if (global_pid != 0)
     {
@@ -780,7 +792,9 @@
   xpipe (p);
   saved_handler = signal (SIGPIPE, SIG_IGN);
 
-  pid = xfork ();
+  pid = vfork ();
+  if (pid == (pid_t) -1)
+    call_arg_fatal ("fork", _("child process"));
 
   if (pid != 0)
     {
