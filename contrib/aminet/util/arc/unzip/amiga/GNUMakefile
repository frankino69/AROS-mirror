#===========================================================================
# Makefile for UnZip, ZipInfo, fUnZip, MakeSFX      AMIGA GNU/C
# Version:  1.0                                     last revised:  17 Aug 10
#===========================================================================
# from Pavel Fedin <pavel_fedin@mail.ru>

# Based on SAS/C version

# Available targets:
# all           builds all executables below
# unzip         builds unzip executable
# unzipsfx      builds unzipsfx executable
# funzip        builds funzip executable
# makesfx       builds makesfx executable
# clean         remove all files created by the compilation
# spotless      like clean target but removes binaries too


##########################
# USER MACRO DEFINITIONS #
##########################

# Set the processor to generate code for UnZip and fUnZip.

CUSECPU =

#
# DEBUGGING
# ---------

# Default: No debugging information added.
CDBG =

#
# SUPPRESSED COMPILER WARNINGS
# ----------------------------

# This is for gcc v4
CIGNORE = -Wno-pointer-sign

#
# OBJECT EXTENSIONS
#

# Extensions used for objects of each executeable.
# Transformation rules require unique extensions.
# Enter *with* dot.
#
O  = .o         # general extension for objects
OX = .xo        # extension for special UnZipSFX objects
OF = .fo        # extension for special fUnZip objects

######################################
#  NOTHING TO CHANGE BEYOND HERE ... #
######################################


# Compiler definitions
#
CC := gcc
#
# Optimizer flags
#
OPT  = -O2

# common compiler flags
CFLAGSC  =  $(CDBG) $(OPT) $(CUSECPU) $(CIGNORE)

OS=$(shell uname)

##################
# TARGET OBJECTS #
##################


# UnZip Objects
OBJS1 = unzip$(O) crc32$(O) crypt$(O) envargs$(O) explode$(O)
OBJS2 = extract$(O) fileio$(O) globals$(O) list$(O) inflate$(O) match$(O)
OBJS3 = process$(O) ttyio$(O) ubz2err$(O) unreduce$(O) unshrink$(O) zipinfo$(O)
OBJSA = amiga$(O) timezone$(O)
OBJS  = $(OBJS1) $(OBJS2) $(OBJS3) $(OBJSA)

# UnZipSFX Objects
OBJX1 = unzip$(OX) extract$(OX) inflate$(OX) match$(OX) process$(OX)
OBJXI = crypt$(OX) crc32$(OX) fileio$(OX) globals$(OX) ttyio$(OX) ubz2err$(OX)
OBJXA = amiga$(OX) timezone$(OX)
OBJX  = $(OBJX1) $(OBJXI) $(OBJXA)

# fUnZip Objects
OBJF1 = funzip$(OF)
OBJF2 = crc32$(OF) crypt$(OF) globals$(OF) inflate$(OF) ttyio$(OF)
OBJFA = filedate$(OF)
OBJF  = $(OBJF1) $(OBJF2) $(OBJFA)

# MakeSFX Objects
OBJM = makesfx$(O)

# Common header files
UNZIP_H1 = unzip.h unzpriv.h globals.h
UNZIP_HA = amiga/amiga.h amiga/z-stat.h
UNZIP_H  = $(UNZIP_H1) $(UNZIP_HA)

# Output targets
UNZIPS = unzip unzipsfx funzip makesfx


#######################################
# DEFAULT TARGET AND PROCESSING RULES #
#######################################

all: $(UNZIPS)

# UnZip transformation rules
#
%$(O): %.c
	$(CC) -c $(CFLAGSC) $*.c -o $@

# UnZipSFX transformation rules
#
%$(OX): %.c
	$(CC) -c $(CFLAGSC) $*.c -o $@ -DSFX

# fUnZip transformation rules
#
%$(OF): %.c
	$(CC) -c $(CFLAGSC) $*.c -o $@ -DFUNZIP

amiga$(O): amiga/amiga.c
	$(CC) -c $(CFLAGSC) -DUNDER='"$(OS)"' amiga/amiga.c -o $@ -I.

amiga$(OX): amiga/amiga.c
	$(CC) -c $(CFLAGSC) -DUNDER='"$(OS)"' amiga/amiga.c -o $@ -DSFX -I.

filedate$(OF): amiga/filedate.c
	$(CC) -c $(CFLAGSC) amiga/filedate.c -o $@ -DFUNZIP -I.

#########################
# Final output targets. #
#########################

unzip: $(OBJS)
	$(CC) -o UnZip $^

funzip: $(OBJF)
	$(CC) -o fUnZip $^

unzipsfx: $(OBJX)
	$(CC) -o UnZipSFX $^

makesfx: $(OBJM) 
	$(CC) -o MakeSFX $^

clean:
	rm -f $(OBJS)
	rm -f $(OBJX)
	rm -f $(OBJF)
	rm -f $(OBJM)

spotless: clean
	rm -f $(UNZIPS)


# UnZip dependencies:
# (objects not needed by Amiga port are commented)

# special rule for adding Amiga internal version number to UnZip
amiga$(O):          amiga/amiga.c amiga/filedate.c amiga/stat.c $(UNZIP_H) crypt.h timezone.h
stat$(O):           amiga/stat.c     amiga/z-stat.h
filedate$(O):       amiga/filedate.c crypt.h timezone.h
api$(O):            api.c      $(UNZIP_H) unzvers.h #zlib.h
apihelp$(O):        apihelp.c  $(UNZIP_H) unzvers.h
crc32$(O):          crc32.c    $(UNZIP_H) zip.h crc32.h
crypt$(O):          crypt.c    $(UNZIP_H) zip.h crypt.h crc32.h ttyio.h
envargs$(O):        envargs.c  $(UNZIP_H)
explode$(O):        explode.c  $(UNZIP_H)
extract$(O):        extract.c  $(UNZIP_H) crc32.h crypt.h
fileio$(O):         fileio.c   $(UNZIP_H) crc32.h crypt.h ttyio.h ebcdic.h
globals$(O):        globals.c  $(UNZIP_H)
inflate$(O):        inflate.c  $(UNZIP_H) inflate.h #zlib.h
list$(O):           list.c     $(UNZIP_H)
match$(O):          match.c    $(UNZIP_H)
process$(O):        process.c  $(UNZIP_H) crc32.h
timezone$(O):       timezone.c $(UNZIP_H) zip.h timezone.h
ttyio$(O):          ttyio.c    $(UNZIP_H) zip.h crypt.h ttyio.h
ubz2err$(O):        ubz2err.c  $(UNZIP_H)
unreduce$(O):       unreduce.c $(UNZIP_H)
unshrink$(O):       unshrink.c $(UNZIP_H)
unzip$(O):          unzip.c    $(UNZIP_H) crypt.h unzvers.h consts.h #zlib.h
#unzipstb$(O):       unzipstb.c $(UNZIP_H) unzvers.h
zipinfo$(O):        zipinfo.c  $(UNZIP_H)


# UnZipSFX dependencies:
#
# special rule for adding Amiga internal version number to UnZipSFX
amiga$(OX):      amiga/amiga.c amiga/filedate.c amiga/stat.c $(UNZIP_H) crypt.h timezone.h
unzip$(OX):      unzip.c    $(UNZIP_H) crypt.h unzvers.h consts.h
crc32$(OX):      crc32.c    $(UNZIP_H) zip.h crc32.h
crypt$(OX):      crypt.c    $(UNZIP_H) zip.h crypt.h crc32.h ttyio.h
extract$(OX):    extract.c  $(UNZIP_H) crc32.h crypt.h
fileio$(OX):     fileio.c   $(UNZIP_H) crc32.h crypt.h ttyio.h ebcdic.h
globals$(OX):    globals.c  $(UNZIP_H)
inflate$(OX):    inflate.c  $(UNZIP_H) inflate.h #zlib.h
match$(OX):      match.c    $(UNZIP_H)
process$(OX):    process.c  $(UNZIP_H) crc32.h
timezone$(OX):   timezone.c $(UNZIP_H) zip.h timezone.h
ttyio$(OX):      ttyio.c    $(UNZIP_H) zip.h crypt.h ttyio.h
ubz2err$(OX):    ubz2err.c  $(UNZIP_H)


# fUnZip dependencies:
#
funzip$(O):      funzip.c   $(UNZIP_H) crc32.h crypt.h ttyio.h
crc32$(OF):      crc32.c    $(UNZIP_H) zip.h crc32.h
crypt$(OF):      crypt.c    $(UNZIP_H) zip.h crypt.h crc32.h ttyio.h
globals$(OF):    globals.c  $(UNZIP_H)
inflate$(OF):    inflate.c  $(UNZIP_H) inflate.h crypt.h #zlib.h
ttyio$(OF):      ttyio.c    $(UNZIP_H) zip.h crypt.h ttyio.h
filedate$(OF):   amiga/filedate.c crypt.h


# MakeSFX dependencies
#
# special transformation rules to never use shortintegers:
makesfx$(O):      amiga/makesfx.c
	$(CC) -c $(CFLAGSC) -o $@ $<


########################
# DEPENDECIES END HERE #
########################
