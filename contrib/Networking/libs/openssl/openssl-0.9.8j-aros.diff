diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/apps.h openssl-0.9.8j.aros/apps/apps.h
--- openssl-0.9.8j/apps/apps.h	2008-11-24 17:14:13.000000000 +0100
+++ openssl-0.9.8j.aros/apps/apps.h	2011-03-13 18:45:42.575204001 +0100
@@ -166,7 +166,7 @@
 
 #endif
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/ca.c openssl-0.9.8j.aros/apps/ca.c
--- openssl-0.9.8j/apps/ca.c	2008-01-03 23:53:03.000000000 +0100
+++ openssl-0.9.8j.aros/apps/ca.c	2011-03-13 18:45:42.585204002 +0100
@@ -83,7 +83,7 @@
 #    else
 #      include <unixlib.h>
 #    endif
-#  elif !defined(OPENSSL_SYS_VXWORKS) && !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_NETWARE)
+#  elif !defined(OPENSSL_SYS_VXWORKS) && !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #    include <sys/file.h>
 #  endif
 #endif
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/Makefile openssl-0.9.8j.aros/apps/Makefile
--- openssl-0.9.8j/apps/Makefile	2008-11-19 17:03:48.000000000 +0100
+++ openssl-0.9.8j.aros/apps/Makefile	2011-03-13 18:45:42.585204002 +0100
@@ -153,12 +153,12 @@
 	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
 		shlib_target="$(SHLIB_TARGET)"; \
 	elif [ -n "$(FIPSCANLIB)" ]; then \
-	  FIPSLD_CC=$(CC); CC=$(TOP)/fips/fipsld; export CC FIPSLD_CC; \
+	  FIPSLD_CC="$(CC)"; CC=$(TOP)/fips/fipsld; export CC FIPSLD_CC; \
 	fi; \
 	LIBRARIES="$(LIBSSL) $(LIBKRB5) $(LIBCRYPTO)" ; \
 	[ "x$(FIPSCANLIB)" = "xlibfips" ] && LIBRARIES="$$LIBRARIES -lfips"; \
 	$(MAKE) -f $(TOP)/Makefile.shared -e \
-		CC=$${CC} APPNAME=$(EXE) OBJECTS="$(PROGRAM).o $(E_OBJ)" \
+		CC="$${CC}" APPNAME=$(EXE) OBJECTS="$(PROGRAM).o $(E_OBJ)" \
 		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
 		link_app.$${shlib_target}
 	-(cd ..; \
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/ocsp.c openssl-0.9.8j.aros/apps/ocsp.c
--- openssl-0.9.8j/apps/ocsp.c	2008-11-05 19:36:35.000000000 +0100
+++ openssl-0.9.8j.aros/apps/ocsp.c	2011-03-13 18:45:42.595204003 +0100
@@ -65,6 +65,10 @@
 #include <openssl/ssl.h>
 #include <openssl/err.h>
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 /* Maximum leeway in validity period: default 5 minutes */
 #define MAX_VALIDITY_PERIOD	(5 * 60)
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/openssl.c openssl-0.9.8j.aros/apps/openssl.c
--- openssl-0.9.8j/apps/openssl.c	2008-09-16 00:24:39.000000000 +0200
+++ openssl-0.9.8j.aros/apps/openssl.c	2011-03-13 18:45:42.595204003 +0100
@@ -130,6 +130,16 @@
 #include "s_apps.h"
 #include <openssl/err.h>
 
+#if defined(OPENSSL_SYS_AROS)
+#include <exec/types.h>
+#include <exec/libraries.h>
+#include <bsdsocket/socketbasetags.h>
+#include <proto/exec.h>
+#include <proto/bsdsocket.h>
+
+struct Library *SocketBase = NULL;
+#endif
+
 /* The LHASH callbacks ("hash" & "cmp") have been replaced by functions with the
  * base prototypes (we cast each variable inside the function to the required
  * type of "FUNCTION*"). This removes the necessity for macro-generated wrapper
@@ -214,6 +224,12 @@
 		}
 	}
 
+#if defined(OPENSSL_SYS_AROS)
+static void aros_bsdsocket_close(void) {
+    CloseLibrary(SocketBase);
+    SocketBase = NULL;
+}
+#endif
 
 int main(int Argc, char *Argv[])
 	{
@@ -229,6 +245,22 @@
 	char **argv,*p;
 	LHASH *prog=NULL;
 	long errline;
+
+#if defined(OPENSSL_SYS_AROS)
+        if ((SocketBase = OpenLibrary("bsdsocket.library", 0)) == NULL) {
+            fprintf(stderr, "Couldn't open bsdsocket.library. Is a TCP/IP stack running?\n");
+	    OPENSSL_EXIT(10);
+        }
+
+        atexit(aros_bsdsocket_close);
+
+        if(SocketBaseTags(SBTM_SETVAL(SBTC_ERRNOPTR(sizeof(errno))), (IPTR) &errno,
+                          SBTM_SETVAL(SBTC_LOGTAGPTR),               (IPTR) "openssl",
+                          TAG_DONE)) {
+            fprintf(stderr, "Error initialising bsdsocket.library\n");
+            OPENSSL_EXIT(10);
+        }
+#endif
  
 	arg.data=NULL;
 	arg.count=0;
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/s_client.c openssl-0.9.8j.aros/apps/s_client.c
--- openssl-0.9.8j/apps/s_client.c	2008-12-20 18:04:08.000000000 +0100
+++ openssl-0.9.8j.aros/apps/s_client.c	2011-03-13 18:45:42.595204003 +0100
@@ -127,6 +127,10 @@
 typedef unsigned int u_int;
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 #define USE_SOCKETS
 #include "apps.h"
 #include <openssl/x509.h>
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/speed.c openssl-0.9.8j.aros/apps/speed.c
--- openssl-0.9.8j/apps/speed.c	2009-01-07 11:48:22.000000000 +0100
+++ openssl-0.9.8j.aros/apps/speed.c	2011-03-13 18:45:42.595204003 +0100
@@ -104,7 +104,7 @@
 #include OPENSSL_UNISTD
 #endif
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
@@ -254,7 +254,7 @@
 # endif
 #endif
 
-#if !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MACINTOSH_CLASSIC) && !defined(OPENSSL_SYS_OS2) && !defined(OPENSSL_SYS_NETWARE)
+#if !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MACINTOSH_CLASSIC) && !defined(OPENSSL_SYS_OS2) && !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 # define HAVE_FORK 1
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/s_server.c openssl-0.9.8j.aros/apps/s_server.c
--- openssl-0.9.8j/apps/s_server.c	2008-12-20 18:04:08.000000000 +0100
+++ openssl-0.9.8j.aros/apps/s_server.c	2011-03-13 18:45:42.595204003 +0100
@@ -144,6 +144,10 @@
 typedef unsigned int u_int;
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 #include <openssl/lhash.h>
 #include <openssl/bn.h>
 #define USE_SOCKETS
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/s_socket.c openssl-0.9.8j.aros/apps/s_socket.c
--- openssl-0.9.8j/apps/s_socket.c	2005-06-13 05:21:00.000000000 +0200
+++ openssl-0.9.8j.aros/apps/s_socket.c	2011-03-13 18:45:42.595204003 +0100
@@ -91,6 +91,10 @@
 #include "netdb.h"
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 static struct hostent *GetHostByName(char *name);
 #if defined(OPENSSL_SYS_WINDOWS) || (defined(OPENSSL_SYS_NETWARE) && !defined(NETWARE_BSDSOCK))
 static void ssl_sock_cleanup(void);
diff -ruN -X ./exclude.patterns openssl-0.9.8j/apps/s_time.c openssl-0.9.8j.aros/apps/s_time.c
--- openssl-0.9.8j/apps/s_time.c	2003-12-27 15:40:17.000000000 +0100
+++ openssl-0.9.8j.aros/apps/s_time.c	2011-03-13 18:45:42.595204003 +0100
@@ -89,6 +89,10 @@
 #define TIMES
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 #ifndef _IRIX
 #include <time.h>
 #endif
diff -ruN -X ./exclude.patterns openssl-0.9.8j/Configure openssl-0.9.8j.aros/Configure
--- openssl-0.9.8j/Configure	2008-12-29 01:18:23.000000000 +0100
+++ openssl-0.9.8j.aros/Configure	2011-03-13 18:45:42.595204003 +0100
@@ -540,6 +540,12 @@
 ##### Compaq Non-Stop Kernel (Tandem)
 "tandem-c89","c89:-Ww -D__TANDEM -D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1 -D_TANDEM_SOURCE -DB_ENDIAN::(unknown):::THIRTY_TWO_BIT:::",
 
+##### AROS
+"aros-i386-cross","$ENV{'AROS_CC'}:-DL_ENDIAN -g -Wall $ENV{'AROS_CFLAGS'}:::AROS::BN_LLONG ${x86_gcc_des} ${x86_gcc_opts}:${x86_elf_asm}::::::$ENV{'AROS_RANLIB'}",
+"aros-x86_64-cross","$ENV{'AROS_CC'}:-DL_ENDIAN -DMD32_REG_T=int -g -Wall $ENV{'AROS_CFLAGS'}:::AROS::SIXTY_FOUR_BIT_LONG RC4_CHAR RC4_CHUNK DES_INT DES_UNROLL BF_PTR:${no_asm}::::::$ENV{'AROS_RANLIB'}",
+"aros-ppc-cross","$ENV{'AROS_CC'}:-DB_ENDIAN -g -Wall $ENV{'AROS_CFLAGS'}:::AROS::BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${no_asm}::::::$ENV{'AROS_RANLIB'}",
+"aros-arm-cross","$ENV{'AROS_CC'}:-DL_ENDIAN -g -Wall $ENV{'AROS_CFLAGS'}:::AROS::BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${no_asm}::::::$ENV{'AROS_RANLIB'}",
+
 );
 
 my @MK1MF_Builds=qw(VC-WIN64I VC-WIN64A
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bf/bf_opts.c openssl-0.9.8j.aros/crypto/bf/bf_opts.c
--- openssl-0.9.8j/crypto/bf/bf_opts.c	2003-11-28 14:10:54.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bf/bf_opts.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bf/bfspeed.c openssl-0.9.8j.aros/crypto/bf/bfspeed.c
--- openssl-0.9.8j/crypto/bf/bfspeed.c	2003-11-28 14:10:54.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bf/bfspeed.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bio/b_sock.c openssl-0.9.8j.aros/crypto/bio/b_sock.c
--- openssl-0.9.8j/crypto/bio/b_sock.c	2008-01-03 23:53:03.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bio/b_sock.c	2011-03-13 18:45:42.595204003 +0100
@@ -90,6 +90,10 @@
 static int wsa_init_done=0;
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 #if 0
 static unsigned long BIO_ghbn_hits=0L;
 static unsigned long BIO_ghbn_miss=0L;
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bio/bss_acpt.c openssl-0.9.8j.aros/crypto/bio/bss_acpt.c
--- openssl-0.9.8j/crypto/bio/bss_acpt.c	2003-03-21 00:18:10.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bio/bss_acpt.c	2011-03-13 18:45:42.595204003 +0100
@@ -75,6 +75,10 @@
 #undef FIONBIO
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 typedef struct bio_accept_st
 	{
 	int state;
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bio/bss_conn.c openssl-0.9.8j.aros/crypto/bio/bss_conn.c
--- openssl-0.9.8j/crypto/bio/bss_conn.c	2006-02-02 23:16:45.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bio/bss_conn.c	2011-03-13 18:45:42.595204003 +0100
@@ -75,6 +75,10 @@
 #undef FIONBIO
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 
 typedef struct bio_connect_st
 	{
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bio/bss_dgram.c openssl-0.9.8j.aros/crypto/bio/bss_dgram.c
--- openssl-0.9.8j/crypto/bio/bss_dgram.c	2008-09-15 07:45:36.000000000 +0200
+++ openssl-0.9.8j.aros/crypto/bio/bss_dgram.c	2011-03-13 18:45:42.595204003 +0100
@@ -74,6 +74,10 @@
 #define sock_puts  SockPuts
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 static int dgram_write(BIO *h, const char *buf, int num);
 static int dgram_read(BIO *h, char *buf, int size);
 static int dgram_puts(BIO *h, const char *str);
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bio/bss_log.c openssl-0.9.8j.aros/crypto/bio/bss_log.c
--- openssl-0.9.8j/crypto/bio/bss_log.c	2003-11-28 14:10:54.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bio/bss_log.c	2011-03-13 18:45:42.595204003 +0100
@@ -84,6 +84,10 @@
 #  include <syslog.h>
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 #include <openssl/buffer.h>
 #include <openssl/err.h>
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/bio/bss_sock.c openssl-0.9.8j.aros/crypto/bio/bss_sock.c
--- openssl-0.9.8j/crypto/bio/bss_sock.c	2003-11-28 14:10:54.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/bio/bss_sock.c	2011-03-13 18:45:42.595204003 +0100
@@ -62,6 +62,10 @@
 #include "cryptlib.h"
 #include <openssl/bio.h>
 
+#if defined(OPENSSL_SYS_AROS)
+#include <proto/bsdsocket.h>
+#endif
+
 #ifdef WATT32
 #define sock_write SockWrite  /* Watt-32 uses same names */
 #define sock_read  SockRead
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/cast/castopts.c openssl-0.9.8j.aros/crypto/cast/castopts.c
--- openssl-0.9.8j/crypto/cast/castopts.c	2003-11-28 14:10:52.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/cast/castopts.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/cast/cast_spd.c openssl-0.9.8j.aros/crypto/cast/cast_spd.c
--- openssl-0.9.8j/crypto/cast/cast_spd.c	2003-11-28 14:10:52.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/cast/cast_spd.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/des/des_opts.c openssl-0.9.8j.aros/crypto/des/des_opts.c
--- openssl-0.9.8j/crypto/des/des_opts.c	2003-11-28 14:10:51.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/des/des_opts.c	2011-03-13 18:45:42.595204003 +0100
@@ -72,7 +72,7 @@
 extern void exit();
 #endif
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/des/speed.c openssl-0.9.8j.aros/crypto/des/speed.c
--- openssl-0.9.8j/crypto/des/speed.c	2003-11-28 14:10:51.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/des/speed.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #define crypt(c,s) (des_crypt((c),(s)))
 #endif
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/idea/idea_spd.c openssl-0.9.8j.aros/crypto/idea/idea_spd.c
--- openssl-0.9.8j/crypto/idea/idea_spd.c	2003-11-28 14:10:50.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/idea/idea_spd.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/rand/rand_egd.c openssl-0.9.8j.aros/crypto/rand/rand_egd.c
--- openssl-0.9.8j/crypto/rand/rand_egd.c	2005-02-19 11:19:07.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/rand/rand_egd.c	2011-03-13 18:45:42.595204003 +0100
@@ -95,7 +95,7 @@
  *   RAND_egd() is a wrapper for RAND_egd_bytes() with numbytes=255.
  */
 
-#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_VMS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_VOS)
+#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_VMS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_VOS) || defined(OPENSSL_SYS_AROS)
 int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes)
 	{
 	return(-1);
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/rand/rand_unix.c openssl-0.9.8j.aros/crypto/rand/rand_unix.c
--- openssl-0.9.8j/crypto/rand/rand_unix.c	2006-06-30 10:14:50.000000000 +0200
+++ openssl-0.9.8j.aros/crypto/rand/rand_unix.c	2011-03-13 18:45:42.595204003 +0100
@@ -150,6 +150,23 @@
 
 	return 1;
 }
+#elif defined __AROS__
+int RAND_poll(void)
+{
+	u_int32_t rnd = 0, i;
+	unsigned char buf[ENTROPY_NEEDED];
+
+	for (i = 0; i < sizeof(buf); i++) {
+		if (i % 4 == 0)
+			rnd = rand();
+		buf[i] = rnd;
+		rnd >>= 8;
+	}
+	RAND_add(buf, sizeof(buf), ENTROPY_NEEDED);
+	memset(buf, 0, sizeof(buf));
+
+	return 1;
+}
 #else /* !defined(__OpenBSD__) */
 int RAND_poll(void)
 {
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/rc2/rc2speed.c openssl-0.9.8j.aros/crypto/rc2/rc2speed.c
--- openssl-0.9.8j/crypto/rc2/rc2speed.c	2006-02-28 21:08:46.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/rc2/rc2speed.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/rc4/rc4speed.c openssl-0.9.8j.aros/crypto/rc4/rc4speed.c
--- openssl-0.9.8j/crypto/rc4/rc4speed.c	2003-11-28 14:10:45.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/rc4/rc4speed.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/rc5/rc5speed.c openssl-0.9.8j.aros/crypto/rc5/rc5speed.c
--- openssl-0.9.8j/crypto/rc5/rc5speed.c	2003-11-28 14:10:45.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/rc5/rc5speed.c	2011-03-13 18:45:42.595204003 +0100
@@ -69,7 +69,7 @@
 #include OPENSSL_UNISTD_IO
 OPENSSL_DECLARE_EXIT
 
-#ifndef OPENSSL_SYS_NETWARE
+#if !defined(OPENSSL_SYS_NETWARE) && !defined(OPENSSL_SYS_AROS)
 #include <signal.h>
 #endif
 
diff -ruN -X ./exclude.patterns openssl-0.9.8j/crypto/ui/ui_openssl.c openssl-0.9.8j.aros/crypto/ui/ui_openssl.c
--- openssl-0.9.8j/crypto/ui/ui_openssl.c	2008-12-30 14:30:56.000000000 +0100
+++ openssl-0.9.8j.aros/crypto/ui/ui_openssl.c	2011-03-13 18:45:42.595204003 +0100
@@ -122,7 +122,16 @@
  * sigaction and fileno included. -pedantic would be more appropriate for
  * the intended purposes, but we can't prevent users from adding -ansi.
  */
+
+/* unfortunately on AROS, declaring _POSIX_C_SOURCE causes __XSI_VISIBLE to
+ * not be defined, which results in stdio.h not bring in stdarg.h and thus not
+ * declaring va_list, which breaks *printf definitions. AROS headers are at
+ * fault here, but the fix is non-trivial.
+ */
+#if !defined(OPENSSL_SYS_AROS)
 #define _POSIX_C_SOURCE 1
+#endif
+
 #include <signal.h>
 #include <stdio.h>
 #include <string.h>
@@ -212,6 +221,12 @@
 #undef SGTTY
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#undef TERMIOS
+#undef TERMIO
+#undef SGTTY
+#endif
+
 #ifdef TERMIOS
 # include <termios.h>
 # define TTY_STRUCT		struct termios
@@ -260,7 +275,7 @@
 	typedef int sig_atomic_t;
 #endif
 
-#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(MAC_OS_GUSI_SOURCE) || defined(OPENSSL_SYS_NETWARE)
+#if defined(OPENSSL_SYS_MACINTOSH_CLASSIC) || defined(MAC_OS_GUSI_SOURCE) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_AROS)
 /*
  * This one needs work. As a matter of fact the code is unoperational
  * and this is only a trick to get it compiled.
diff -ruN -X ./exclude.patterns openssl-0.9.8j/e_os2.h openssl-0.9.8j.aros/e_os2.h
--- openssl-0.9.8j/e_os2.h	2005-12-18 19:57:07.000000000 +0100
+++ openssl-0.9.8j.aros/e_os2.h	2011-03-13 18:45:42.605204004 +0100
@@ -202,6 +202,12 @@
 # define OPENSSL_SYS_VXWORKS
 #endif
 
+/* ------------------------------- AROS ------------------------------------ */
+#ifdef __AROS__
+# undef OPENSSL_SYS_UNIX
+# define OPENSSL_SYS_AROS
+#endif
+
 /**
  * That's it for OS-specific stuff
  *****************************************************************************/
diff -ruN -X ./exclude.patterns openssl-0.9.8j/e_os.h openssl-0.9.8j.aros/e_os.h
--- openssl-0.9.8j/e_os.h	2008-12-30 14:30:54.000000000 +0100
+++ openssl-0.9.8j.aros/e_os.h	2011-03-13 18:45:42.605204004 +0100
@@ -109,6 +109,12 @@
 # endif
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#  define NO_CHMOD
+#  undef  DEVRANDOM
+#  define GETPID_IS_MEANINGLESS
+#endif
+
 /********************************************************************
  The Microsoft section
  ********************************************************************/
@@ -200,6 +206,13 @@
 #define readsocket(s,b,n)		recv((s),(b),(n),0)
 #define writesocket(s,b,n)		send((s),(b),(n),0)
 #endif
+#elif defined(__AROS__)
+#define get_last_socket_error()	Errno()
+#define clear_socket_error()	
+#define ioctlsocket(a,b,c)	IoctlSocket(a,b,c)
+#define closesocket(s)		CloseSocket(s)
+#define readsocket(s,b,n)	recv((s),(b),(n),0)
+#define writesocket(s,b,n)	send((s),(b),(n),0)
 #else
 #define get_last_socket_error()	errno
 #define clear_socket_error()	errno=0
diff -ruN -X ./exclude.patterns openssl-0.9.8j/Makefile.org openssl-0.9.8j.aros/Makefile.org
--- openssl-0.9.8j/Makefile.org	2008-12-30 14:26:26.000000000 +0100
+++ openssl-0.9.8j.aros/Makefile.org	2011-03-13 18:45:42.605204004 +0100
@@ -357,7 +357,7 @@
 			$(AR) libcrypto.a fips/fipscanister.o ; \
 		else \
 			if [ "$(FIPSCANLIB)" = "libcrypto" ]; then \
-				FIPSLD_CC=$(CC); CC=fips/fipsld; \
+				FIPSLD_CC="$(CC)"; CC=fips/fipsld; \
 				export CC FIPSLD_CC; \
 			fi; \
 			$(MAKE) -e SHLIBDIRS='crypto' build-shared; \
@@ -380,7 +380,7 @@
 fips/fipscanister.o:	build_fips
 libfips$(SHLIB_EXT):		fips/fipscanister.o
 	@if [ "$(SHLIB_TARGET)" != "" ]; then \
-		FIPSLD_CC=$(CC); CC=fips/fipsld; export CC FIPSLD_CC; \
+		FIPSLD_CC="$(CC)"; CC=fips/fipsld; export CC FIPSLD_CC; \
 		$(MAKE) -f Makefile.shared -e $(BUILDENV) \
 			CC=$${CC} LIBNAME=fips THIS=$@ \
 			LIBEXTRAS=fips/fipscanister.o \
@@ -608,7 +608,7 @@
 dist_pem_h:
 	(cd crypto/pem; $(MAKE) -e $(BUILDENV) pem.h; $(MAKE) clean)
 
-install: all install_docs install_sw
+install: all install_sw
 
 install_sw:
 	@$(PERL) $(TOP)/util/mkdir-p.pl $(INSTALL_PREFIX)$(INSTALLTOP)/bin \
diff -ruN -X ./exclude.patterns openssl-0.9.8j/ssl/ssltest.c openssl-0.9.8j.aros/ssl/ssltest.c
--- openssl-0.9.8j/ssl/ssltest.c	2009-01-07 11:48:23.000000000 +0100
+++ openssl-0.9.8j.aros/ssl/ssltest.c	2011-03-13 18:45:42.605204004 +0100
@@ -166,6 +166,16 @@
 #include OPENSSL_UNISTD
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+#include <exec/types.h>
+#include <exec/libraries.h>
+#include <bsdsocket/socketbasetags.h>
+#include <proto/exec.h>
+#include <proto/bsdsocket.h>
+
+struct Library *SocketBase = NULL;
+#endif
+
 #ifdef OPENSSL_SYS_VMS
 #  define TEST_SERVER_CERT "SYS$DISK:[-.APPS]SERVER.PEM"
 #  define TEST_CLIENT_CERT "SYS$DISK:[-.APPS]CLIENT.PEM"
@@ -175,6 +185,9 @@
 #elif defined(OPENSSL_SYS_NETWARE)
 #  define TEST_SERVER_CERT "\\openssl\\apps\\server.pem"
 #  define TEST_CLIENT_CERT "\\openssl\\apps\\client.pem"
+#elif defined(OPENSSL_SYS_AROS)
+#  define TEST_SERVER_CERT "OPENSSL:server.pem"
+#  define TEST_CLIENT_CERT "OPENSSL:client.pem"
 #else
 #  define TEST_SERVER_CERT "../apps/server.pem"
 #  define TEST_CLIENT_CERT "../apps/client.pem"
@@ -386,6 +399,12 @@
 		}
 	}
 
+#if defined(OPENSSL_SYS_AROS)
+static void aros_bsdsocket_close(void) {
+    CloseLibrary(SocketBase);
+    SocketBase = NULL;
+}
+#endif
 
 int main(int argc, char *argv[])
 	{
@@ -432,6 +451,22 @@
 	int fips_mode=0;
 #endif
 
+#if defined(OPENSSL_SYS_AROS)
+        if ((SocketBase = OpenLibrary("bsdsocket.library", 0)) == NULL) {
+            fprintf(stderr, "Couldn't open bsdsocket.library. Is a TCP/IP stack running?\n");
+	    EXIT(10);
+        }
+
+        atexit(aros_bsdsocket_close);
+
+        if(SocketBaseTags(SBTM_SETVAL(SBTC_ERRNOPTR(sizeof(errno))), (IPTR) &errno,
+                          SBTM_SETVAL(SBTC_LOGTAGPTR),               (IPTR) "openssl",
+                          TAG_DONE)) {
+            fprintf(stderr, "Error initialising bsdsocket.library\n");
+            EXIT(10);
+        }
+#endif
+
 	verbose = 0;
 	debug = 0;
 	cipher = 0;
diff -ruN -X ./exclude.patterns openssl-0.9.8j/test/Makefile openssl-0.9.8j.aros/test/Makefile
--- openssl-0.9.8j/test/Makefile	2008-12-13 13:22:47.000000000 +0100
+++ openssl-0.9.8j.aros/test/Makefile	2011-03-13 18:45:42.605204004 +0100
@@ -402,11 +402,11 @@
 	if [ "$(FIPSCANLIB)" = "libfips" ]; then \
 		LIBRARIES="-L$(TOP) -lfips"; \
 	elif [ -n "$(FIPSCANLIB)" ]; then \
-		FIPSLD_CC=$(CC); CC=$(TOP)/fips/fipsld; export CC FIPSLD_CC; \
+		FIPSLD_CC="$(CC)"; CC=$(TOP)/fips/fipsld; export CC FIPSLD_CC; \
 		LIBRARIES="$${FIPSLIBDIR:-$(TOP)/fips/}fipscanister.o"; \
 	fi; \
 	$(MAKE) -f $(TOP)/Makefile.shared -e \
-		CC=$${CC} APPNAME=$$target$(EXE_EXT) OBJECTS="$$target.o" \
+		CC="$${CC}" APPNAME=$$target$(EXE_EXT) OBJECTS="$$target.o" \
 		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
 		link_app.$${shlib_target}
 
@@ -415,11 +415,11 @@
 	fi; \
 	LIBRARIES="$(LIBSSL) $(LIBCRYPTO) $(LIBKRB5)"; \
 	if [ -z "$(SHARED_LIBS)" -a -n "$(FIPSCANLIB)" ] ; then \
-		FIPSLD_CC=$(CC); CC=$(TOP)/fips/fipsld; export CC FIPSLD_CC; \
+		FIPSLD_CC="$(CC)"; CC=$(TOP)/fips/fipsld; export CC FIPSLD_CC; \
 	fi; \
 	[ "$(FIPSCANLIB)" = "libfips" ] && LIBRARIES="$$LIBRARIES -lfips"; \
 	$(MAKE) -f $(TOP)/Makefile.shared -e \
-		CC=$${CC} APPNAME=$$target$(EXE_EXT) OBJECTS="$$target.o" \
+		CC="$${CC}" APPNAME=$$target$(EXE_EXT) OBJECTS="$$target.o" \
 		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
 		link_app.$${shlib_target}
 
