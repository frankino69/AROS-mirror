diff -urN netpbm-10.26.53/lib/compile.h netpbm-10.26.53.new/lib/compile.h
--- netpbm-10.26.53/lib/compile.h	1970-01-01 01:00:00.000000000 +0100
+++ netpbm-10.26.53.new/lib/compile.h	2008-05-04 19:45:06.000000000 +0200
@@ -0,0 +1,5 @@
+/* This file tells the package when it was compiled */
+/* DO NOT EDIT - THIS FILE IS MAINTAINED AUTOMATICALLY */
+/* Created by the program 'stamp-date'  */
+#define COMPILE_TIME "Mon May  5 13:19:55 CEST 2008"
+#define COMPILED_BY "sszymczy"
diff -urN netpbm-10.26.53/pm_config.h netpbm-10.26.53.new/pm_config.h
--- netpbm-10.26.53/pm_config.h	1970-01-01 01:00:00.000000000 +0100
+++ netpbm-10.26.53.new/pm_config.h	2008-05-04 18:44:35.000000000 +0200
@@ -0,0 +1,315 @@
+#ifndef PM_CONFIG_H
+#define PM_CONFIG_H
+
+#include <inttypes.h>
+
+/**************************************************************************
+                               NETPBM
+                           pm_config.in.h
+***************************************************************************
+  This file provides platform-dependent definitions for all Netpbm
+  libraries and the programs that use them.
+
+  The make files generate pm_config.h by copying this file and adding
+  other stuff.  The Netpbm programs #include pm_config.h.
+
+  Wherever possible, Netpbm handles customization via the make files
+  instead of via this file.  However, Netpbm's make file philosophy
+  discourages lining up a bunch of -D options on every compile, so a 
+  #define here would be preferable to a -D compile option.
+
+**************************************************************************/
+
+#if defined(USG) || defined(SVR4) || defined(VMS) || defined(__SVR4)
+#define SYSV
+#endif
+#if !( defined(BSD) || defined(SYSV) || defined(MSDOS) || defined(__amigaos__))
+/* CONFIGURE: If your system is >= 4.2BSD, set the BSD option; if you're a
+** System V site, set the SYSV option; if you're IBM-compatible, set MSDOS;
+** and if you run on an Amiga, set AMIGA. If your compiler is ANSI C, you're
+** probably better off setting SYSV - all it affects is string handling.
+*/
+#define BSD
+/* #define SYSV */
+/* #define MSDOS */
+#endif
+
+/* Switch macros like _POSIX_SOURCE are supposed to add features from
+   the indicated standard to the C library.  A source file defines one
+   of these macros to declare that it uses features of that standard
+   as opposed to conflicting features of other standards (e.g. the
+   POSIX foo() subroutine might do something different from the X/Open
+   foo() subroutine).  Plus, this forces the coder to understand upon
+   what feature sets his program relies.
+
+   But some C library developers have misunderstood this and think of these
+   macros like the old __ansi__ macro, which tells the C library, "Don't 
+   have any features that aren't in the ANSI standard."  I.e. it's just
+   the opposite -- the macro subtracts features instead of adding them.
+
+   This means that on some platforms, Netpbm programs must define
+   _POSIX_SOURCE, and on others, it must not.  Netpbm's POSIX_IS_IMPLIED 
+   macro indicates that we're on a platform where we need not define
+   _POSIX_SOURCE (and probably must not).
+
+   The problematic C libraries treat _XOPEN_SOURCE the same way.
+*/
+#if defined(__OpenBSD__) || defined (__NetBSD__) || defined(__bsdi__) || defined(__APPLE__)
+#define POSIX_IS_IMPLIED
+#endif
+
+
+/* NOTE: do not use "bool" as a type in an external interface.  It could
+   have different definitions on either side of the interface.  Even if both
+   sides include this interface header file, the conditional compilation
+   here means one side may use the typedef below and the other side may
+   use some other definition.  For an external interface, be safe and just
+   use "int".
+*/
+
+/* We used to assume that if TRUE was defined, then bool was too.
+   However, we had a report on 2001.09.21 of a Tru64 system that had
+   TRUE but not bool and on 2002.03.21 of an AIX 4.3 system that was
+   likewise.  So now we define bool all the time, unless the macro
+   HAVE_BOOL is defined.  If someone is using the Netpbm libraries and
+   also another library that defines bool, he can either make the
+   other library define/respect HAVE_BOOL or just define HAVE_BOOL in
+   the file that includes pm_config.h or with a compiler option.  Note
+   that C++ always has bool.  
+*/
+#ifndef TRUE
+#define TRUE 1
+#endif
+#ifndef FALSE
+#define FALSE 0
+#endif
+/* C++ has a "bool" type built in. */
+#ifndef __cplusplus
+#ifndef HAVE_BOOL
+#define HAVE_BOOL 1
+typedef int bool;
+#endif
+#endif
+
+/* CONFIGURE: If you have an X11-style rgb color names file, define its
+** path here.  This is used by PPM to parse color names into rgb values.
+** If you don't have such a file, comment this out and use the alternative
+** hex and decimal forms to specify colors (see ppm/pgmtoppm.1 for details).  */
+/* There was some evidence before Netpbm 9.1 that the rgb database macros
+   might be already set right now.  I couldn't figure out how, so I changed
+   their meanings and they are now set unconditionally.  -Bryan 00.05.03.
+*/
+#ifdef VMS
+#define RGB_DB1 "PBMplus_Dir:RGB.TXT"
+#define RGB_DB2 "PBMplus_Dir:RGB.TXT"
+#define RGB_DB3 "PBMplus_Dir:RGB.TXT"
+#else
+#define RGB_DB1 "/usr/lib/X11/rgb.txt"
+#define RGB_DB2 "/usr/openwin/lib/rgb.txt"
+#define RGB_DB3 "/usr/X11R6/lib/X11/rgb.txt"
+#endif
+
+/* CONFIGURE: This is the name of an environment variable that tells
+** where the color names database is.  If the environment variable isn't
+** set, Netpbm tries the hardcoded defaults set above.
+*/
+#define RGBENV "RGBDEF"    /* name of env-var */
+
+/* CONFIGURE: Normally, PPM handles a pixel as a struct of three grays.
+** If grays are represented as chars, that's 24 bits per color pixel; if
+** grays are represented as ints, that's usually 96 bits per color pixel.  PPM
+** can be modified to pack the three samples into a single longword,
+** 10 bits each, for 32 bits per pixel.
+**
+** If you don't need more than 10 bits for each color component, AND
+** you care more about memory use than speed, then this option might
+** be a win.  Under these circumstances it will make some of the
+** programs use 3 times less space, but all of the programs will run
+** slower.  In one test, it was 1.4 times slower.
+** 
+*/
+/* #define PPM_PACKCOLORS */
+
+/* CONFIGURE: uncomment this to enable debugging checks. */
+/* #define DEBUG */
+
+#if (defined(SYSV) || defined(__amigaos__))
+
+#include <string.h>
+/* Before Netpbm 9.1, rand and srand were macros for random and
+   srandom here.  This caused a failure on a SunOS 5.6 system, which
+   is SYSV, but has both rand and random declared (with different
+   return types).  The macro caused the prototype for random to be a
+   second prototype for rand.  Before 9.1, Netpbm programs called
+   random() and on a SVID system, that was really a call to rand().
+   We assume all modern systems have rand() itself, so now Netpbm
+   always calls rand() and if we find a platform that doesn't have
+   rand(), we will add something here for that platform.  -Bryan 00.04.26
+#define random rand
+#define srandom(s) srand(s)
+extern void srand();
+extern int rand();
+*/
+/* Before Netpbm 9.15, there were macro definitions of index() and 
+   rindex() here, but there are no longer any invocations of those 
+   functions in Netpbm, except in the VMS-only code, so there's no
+   reason for them.
+*/
+
+#ifndef __SASC
+#ifndef _DCC    /* Amiga DICE Compiler */
+#define bzero(dst,len) memset(dst,0,len)
+#define bcopy(src,dst,len) memcpy(dst,src,len)
+#define bcmp memcmp
+#endif /* _DCC */
+#endif /* __SASC */
+
+#endif /*SYSV or Amiga*/
+
+/* We should change all of Netpbm to use uint32_t instead of uint32n,
+   because we now have a strategy for ensuring that uint32_t is defined.
+   But we're going to wait a while in case our uint32_t strategy doesn't
+   work.  04.08.24.
+*/
+typedef uint32_t uint32n;
+typedef int32_t int32n;
+
+#include <fcntl.h>
+#include <time.h>
+#include <stdlib.h>
+#include <unistd.h>
+/* 
+   Before Netpbm 9.0, atoi() and exit() were declared for everybody
+   except MSDOS and Amiga, and time() and write() were declared for
+   everybody except MSDOS, Amiga, and __osf__.  fcntl.h, time.h, and
+   stlib.h were included for MSDOS and Amiga, and unistd.h was included
+   for everyone except VMS, MSDOS, and Amiga.  With the netbsd patches,
+   atoi(), exit(), time(), and write() were not declared for __NetBSD__.
+
+   We're hoping that all current systems have the standard header
+   files, and will reinstate some of these explicit declarations if we
+   hear otherwise.  
+
+   If it turns out to be this easy, we should just move these inclusions
+   to the source files that actually need them.
+   
+   -Bryan 2000.04.13
+
+extern int atoi();
+extern void exit();
+extern long time();
+extern int write(); 
+*/
+
+/* CONFIGURE: On most BSD systems, malloc() gets declared in stdlib.h, on
+** system V, it gets declared in malloc.h. On some systems, malloc.h
+** doesn't declare these, so we have to do it here. On other systems,
+** for example HP/UX, it declares them incompatibly.  And some systems,
+** for example Dynix, don't have a malloc.h at all.  A sad situation.
+** If you have compilation problems that point here, feel free to tweak
+** or remove these declarations.
+*/
+#ifdef BSD
+#include <stdlib.h>
+#endif
+#if (defined(SYSV) && !defined(VMS))
+#include <malloc.h>
+#endif
+/* extern char* malloc(); */
+/* extern char* realloc(); */
+/* extern char* calloc(); */
+
+/* CONFIGURE: Some systems don't have vfprintf(), which we need for the
+** error-reporting routines.  If you compile and get a link error about
+** this routine, uncomment the first define, which gives you a vfprintf
+** that uses the theoretically non-portable but fairly common routine
+** _doprnt().  If you then get a link error about _doprnt, or
+** message-printing doesn't look like it's working, try the second
+** define instead.
+*/
+/* #define NEED_VFPRINTF1 */
+/* #define NEED_VFPRINTF2 */
+
+/* CONFIGURE: Some systems don't have strstr(), which some routines need.
+** If you compile and get a link error about this routine, uncomment the
+** define, which gives you a strstr.
+*/
+/* #define NEED_STRSTR */
+
+/* CONFIGURE: Set this option if your compiler uses strerror(errno)
+** instead of sys_errlist[errno] for error messages.
+*/
+#define A_STRERROR
+
+/* CONFIGURE: If your system has the setmode() function, set HAVE_SETMODE.
+** If you do, and also the O_BINARY file mode, pm_init() will set the mode
+** of stdin and stdout to binary for all Netpbm programs.
+** You need this with Cygwin (Windows).
+*/
+#ifdef __CYGWIN__
+#define HAVE_SETMODE
+#endif
+
+/* #define HAVE_SETMODE */
+
+#ifdef __amigaos__
+#include <clib/exec_protos.h>
+#define getpid() ((pid_t)FindTask(NULL))
+#endif
+
+#ifdef DJGPP
+#define HAVE_SETMODE
+#define lstat stat
+#endif /* DJGPP */
+
+/*  CONFIGURE: Netpbm uses __inline__ to declare functions that should
+    be compiled as inline code.  GNU C recognizes the __inline__ keyword.
+    If your compiler recognizes any other keyword for this, you can set
+    it here.
+*/
+#ifndef __GNUC__
+#ifndef __inline__
+#ifdef __sgi
+#define __inline__ __inline
+#else
+#define __inline__
+#endif
+#endif
+#endif
+
+/* CONFIGURE: Some systems seem to need more than standard program linkage
+   to get a data (as opposed to function) item out of a library.
+
+   On Windows mingw systems, it seems you have to #include <import_mingw.h>
+   and #define EXTERNDATA DLL_IMPORT  .  2001.05.19
+*/
+#define EXTERNDATA extern
+
+/* only Pnmstitch uses UNREFERENCED_PARAMETER today (and I'm not sure why),
+   but it might come in handy some day.
+*/
+#if (!defined(UNREFERENCED_PARAMETER))
+# if (defined(__GNUC__))
+#  define UNREFERENCED_PARAMETER(x)
+# elif (defined(__USLC__) || defined(_M_XENIX))
+#  define UNREFERENCED_PARAMETER(x) ((x)=(x))
+# else
+#  define UNREFERENCED_PARAMETER(x) (x)
+# endif
+#endif
+
+/* In GNU, _LFS_LARGEFILE means the "off_t" functions (ftello, etc.) are
+   available.  In AIX, _AIXVERSION_430 means it's AIX Version 4.3.0 or
+   better, which seems to mean the "off_t" functions are available.
+*/
+#if defined(_LFS_LARGEFILE) || defined(_AIXVERSION_430)
+typedef off_t pm_filepos;
+#define FTELLO ftello
+#define FSEEKO fseeko
+#else
+typedef long int pm_filepos;
+#define FTELLO ftell
+#define FSEEKO fseek
+#endif
+
+#endif
diff -urN netpbm-10.26.53/converter/other/pngtopnm.c netpbm-10.26.53-aros/converter/other/pngtopnm.c
--- netpbm-10.26.53/converter/other/pngtopnm.c	2004-04-03 19:18:34.000000000 -0500
+++ netpbm-10.26.53-aros/converter/other/pngtopnm.c	2011-03-05 23:51:03.000000000 -0500
@@ -85,8 +85,8 @@
 #ifdef __STDC__
 static png_uint_16 _get_png_val (png_byte **pp, int bit_depth);
 static int iscolor (png_color c);
-static void save_text (png_info *info_ptr, FILE *tfp);
-static void show_time (png_info *info_ptr);
+static void save_text (png_struct *png_ptr, png_info *info_ptr, FILE *tfp);
+static void show_time (png_struct *png_ptr, png_info *info_ptr);
 static void pngtopnm_error_handler (png_structp png_ptr, png_const_charp msg);
 int main (int argc, char *argv[]);
 #endif
@@ -179,7 +179,7 @@
 
 
 
-#define get_png_val(p) _get_png_val (&(p), info_ptr->bit_depth)
+#define get_png_val(p) _get_png_val (&(p), png_get_bit_depth(png_ptr, info_ptr))
 
 #ifdef __STDC__
 static png_uint_16 _get_png_val (png_byte **pp, int bit_depth)
@@ -253,33 +253,38 @@
 }
 
 #ifdef __STDC__
-static void save_text (png_info *info_ptr, FILE *tfp)
+static void save_text (png_struct *png_ptr, png_info *info_ptr, FILE *tfp)
 #else
-static void save_text (info_ptr, tfp)
+static void save_text (png_ptr, info_ptr, tfp)
+png_struct *png_ptr;
 png_info *info_ptr;
 FILE *tfp;
 #endif
 {
   int i, j, k;
+  int num_text = 0;
+  png_text *text;
 
-  for (i = 0 ; i < info_ptr->num_text ; i++) {
+  png_get_text(png_ptr, info_ptr, &text, &num_text);
+
+  for (i = 0 ; i < num_text ; i++) {
     j = 0;
-    while (info_ptr->text[i].key[j] != '\0' && info_ptr->text[i].key[j] != ' ')
+    while (text[i].key[j] != '\0' && text[i].key[j] != ' ')
       j++;    
-    if (info_ptr->text[i].key[j] != ' ') {
-      fprintf (tfp, "%s", info_ptr->text[i].key);
-      for (j = strlen (info_ptr->text[i].key) ; j < 15 ; j++)
+    if (text[i].key[j] != ' ') {
+      fprintf (tfp, "%s", text[i].key);
+      for (j = strlen (text[i].key) ; j < 15 ; j++)
         putc (' ', tfp);
     } else {
-      fprintf (tfp, "\"%s\"", info_ptr->text[i].key);
-      for (j = strlen (info_ptr->text[i].key) ; j < 13 ; j++)
+      fprintf (tfp, "\"%s\"", text[i].key);
+      for (j = strlen (text[i].key) ; j < 13 ; j++)
         putc (' ', tfp);
     }
     putc (' ', tfp); /* at least one space between key and text */
     
-    for (j = 0 ; j < info_ptr->text[i].text_length ; j++) {
-      putc (info_ptr->text[i].text[j], tfp);
-      if (info_ptr->text[i].text[j] == '\n')
+    for (j = 0 ; j < text[i].text_length ; j++) {
+      putc (text[i].text[j], tfp);
+      if (text[i].text[j] == '\n')
         for (k = 0 ; k < 16 ; k++)
           putc ((int)' ', tfp);
     }
@@ -288,9 +293,10 @@
 }
 
 #ifdef __STDC__
-static void show_time (png_info *info_ptr)
+static void show_time (png_struct *png_ptr, png_info *info_ptr)
 #else
-static void show_time (info_ptr)
+static void show_time (png_ptr, info_ptr)
+png_struct *png_ptr;
 png_info *info_ptr;
 #endif
 {
@@ -299,11 +305,13 @@
         "July", "August", "September", "October", "November", "December"
     };
 
-  if (info_ptr->valid & PNG_INFO_tIME) {
+  if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tIME)) {
+    png_time *mod_time;
+    png_get_tIME(png_ptr, info_ptr, &mod_time);
     pm_message ("modification time: %02d %s %d %02d:%02d:%02d",
-                info_ptr->mod_time.day, month[info_ptr->mod_time.month],
-                info_ptr->mod_time.year, info_ptr->mod_time.hour,
-                info_ptr->mod_time.minute, info_ptr->mod_time.second);
+                mod_time->day, month[mod_time->month],
+                mod_time->year, mod_time->hour,
+                mod_time->minute, mod_time->second);
   }
 }
 
@@ -343,12 +351,13 @@
 
 
 static void
-dump_png_info(png_info *info_ptr) {
+dump_png_info(png_struct *png_ptr, png_info *info_ptr) {
 
     const char *type_string;
     const char *filter_string;
+    png_color_16 *background;
 
-    switch (info_ptr->color_type) {
+    switch (png_get_color_type(png_ptr, info_ptr)) {
       case PNG_COLOR_TYPE_GRAY:
         type_string = "gray";
         break;
@@ -370,89 +379,94 @@
         break;
     }
 
-    switch (info_ptr->filter_type) {
+    switch (png_get_filter_type(png_ptr, info_ptr)) {
     case PNG_FILTER_TYPE_BASE:
         asprintfN(&filter_string, "base filter");
         break;
     default:
         asprintfN(&filter_string, "unknown filter type %d", 
-                  info_ptr->filter_type);
+                  png_get_filter_type(png_ptr, info_ptr));
     }
 
     pm_message("reading a %ldw x %ldh image, %d bit%s",
-               info_ptr->width, info_ptr->height,
-               info_ptr->bit_depth, info_ptr->bit_depth > 1 ? "s" : "");
+               (long int)png_get_image_width(png_ptr, info_ptr), (long int)png_get_image_height(png_ptr, info_ptr),
+               png_get_bit_depth(png_ptr, info_ptr), png_get_bit_depth(png_ptr, info_ptr) > 1 ? "s" : "");
     pm_message("%s, %s, %s",
                type_string,
-               info_ptr->interlace_type ? 
+               png_get_interlace_type(png_ptr, info_ptr) ? 
                "Adam7 interlaced" : "not interlaced",
                filter_string);
-    pm_message("background {index, gray, red, green, blue} = "
+
+    if (png_get_bKGD(png_ptr, info_ptr, &background)) {
+      pm_message("background {index, gray, red, green, blue} = "
                "{%d, %d, %d, %d, %d}",
-               info_ptr->background.index,
-               info_ptr->background.gray,
-               info_ptr->background.red,
-               info_ptr->background.green,
-               info_ptr->background.blue);
+               background->index,
+               background->gray,
+               background->red,
+               background->green,
+               background->blue);
+    }
 
     strfree(filter_string);
 
-    if (info_ptr->valid & PNG_INFO_tRNS)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS))
         pm_message("tRNS chunk (transparency): present");
     else
         pm_message("tRNS chunk (transparency): not present");
 
-    if (info_ptr->valid & PNG_INFO_gAMA)
-        pm_message("gAMA chunk (image gamma): gamma = %4.2f", info_ptr->gamma);
-    else
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_gAMA)) {
+    	double gamma;
+    	png_get_gAMA(png_ptr, info_ptr, &gamma);
+        pm_message("gAMA chunk (image gamma): gamma = %4.2f", gamma);
+    } else
         pm_message("gAMA chunk (image gamma): not present");
 
-    if (info_ptr->valid & PNG_INFO_sBIT)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_sBIT))
         pm_message("sBIT chunk: present");
     else
         pm_message("sBIT chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_cHRM)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_cHRM))
         pm_message("cHRM chunk: present");
     else
         pm_message("cHRM chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_PLTE)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE))
         pm_message("PLTE chunk: present");
     else
         pm_message("PLTE chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_bKGD)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_bKGD))
         pm_message("bKGD chunk: present");
     else
         pm_message("bKGD chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_PLTE)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE))
         pm_message("hIST chunk: present");
     else
         pm_message("hIST chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_pHYs)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_pHYs))
         pm_message("pHYs chunk: present");
     else
         pm_message("pHYs chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_oFFs)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_oFFs))
         pm_message("oFFs chunk: present");
     else
         pm_message("oFFs chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_tIME)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tIME))
         pm_message("tIME chunk: present");
     else
         pm_message("tIME chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_pCAL)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_pCAL))
         pm_message("pCAL chunk: present");
     else
         pm_message("pCAL chunk: not present");
 
-    if (info_ptr->valid & PNG_INFO_sRGB)
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_sRGB))
         pm_message("sRGB chunk: present");
     else
         pm_message("sRGB chunk: not present");
@@ -464,6 +478,7 @@
 writePnm(FILE *      const ofP,
          xelval      const maxval,
          int         const pnm_type,
+         png_struct *      png_ptr,
          png_info *  const info_ptr,
          png_byte ** const png_image) {
 
@@ -478,23 +493,29 @@
                     "UNKNOWN!", 
                     maxval);
     
-    xelrow = pnm_allocrow(info_ptr->width);
+    xelrow = pnm_allocrow(png_get_image_width(png_ptr, info_ptr));
 
-    pnm_writepnminit(stdout, info_ptr->width, info_ptr->height, maxval,
+    pnm_writepnminit(stdout, png_get_image_width(png_ptr, info_ptr), png_get_image_height(png_ptr, info_ptr), maxval,
                      pnm_type, FALSE);
 
-    for (row = 0; row < info_ptr->height; ++row) {
+    for (row = 0; row < png_get_image_height(png_ptr, info_ptr); ++row) {
         png_byte * png_pixelP;
         int col;
 
         png_pixelP = &png_image[row][0];  /* initial value */
-        for (col = 0; col < info_ptr->width; ++col) {
+        for (col = 0; col < png_get_image_width(png_ptr, info_ptr); ++col) {
             png_uint_16 const c = get_png_val(png_pixelP);
-            switch (info_ptr->color_type) {
+            png_color_16 *color;
+            png_byte *trans;
+            int num_palette = 0, num_trans = 0;
+            png_color *palette;
+            png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);
+            png_get_tRNS(png_ptr, info_ptr, NULL, &num_trans, &color);
+            switch (png_get_color_type(png_ptr, info_ptr)) {
             case PNG_COLOR_TYPE_GRAY:
                 setXel(&xelrow[col], c, c, c,
-                       ((info_ptr->valid & PNG_INFO_tRNS) &&
-                        (c == gamma_correct(info_ptr->trans_values.gray,
+                       ((png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) &&
+                        (c == gamma_correct(color->gray,
                                             totalgamma))) ?
                        0 : maxval);
                 break;
@@ -506,24 +527,24 @@
             break;
 
             case PNG_COLOR_TYPE_PALETTE:
-                setXel(&xelrow[col], info_ptr->palette[c].red,
-                       info_ptr->palette[c].green, 
-                       info_ptr->palette[c].blue,
-                       (info_ptr->valid & PNG_INFO_tRNS) &&
-                       c < info_ptr->num_trans ?
-                       info_ptr->trans[c] : maxval);
+                setXel(&xelrow[col], palette[c].red,
+                       palette[c].green, 
+                       palette[c].blue,
+                       (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) &&
+                       c < num_trans ?
+                       trans[c] : maxval);
                 break;
 
             case PNG_COLOR_TYPE_RGB: {
                 png_uint_16 const c2 = get_png_val(png_pixelP);
                 png_uint_16 const c3 = get_png_val(png_pixelP);
                 setXel(&xelrow[col], c, c2, c3,
-                       ((info_ptr->valid & PNG_INFO_tRNS) &&
-                        (c == gamma_correct(info_ptr->trans_values.red,
+                       ((png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) &&
+                        (c == gamma_correct(color->red,
                                             totalgamma)) &&
-                        (c2 == gamma_correct(info_ptr->trans_values.green,
+                        (c2 == gamma_correct(color->green,
                                              totalgamma)) &&
-                        (c3 == gamma_correct(info_ptr->trans_values.blue,
+                        (c3 == gamma_correct(color->blue,
                                              totalgamma))) ?
                        0 : maxval);
             }
@@ -538,10 +559,10 @@
             break;
 
             default:
-                pm_error ("unknown PNG color type: %d", info_ptr->color_type);
+                pm_error ("unknown PNG color type: %d", png_get_color_type(png_ptr, info_ptr));
             }
         }
-        pnm_writepnmrow(ofP, xelrow, info_ptr->width, maxval, pnm_type, FALSE);
+        pnm_writepnmrow(ofP, xelrow, png_get_image_width(png_ptr, info_ptr), maxval, pnm_type, FALSE);
     }
     pnm_freerow (xelrow);
 }
@@ -604,28 +625,28 @@
   png_set_sig_bytes (png_ptr, SIG_CHECK_SIZE);
   png_read_info (png_ptr, info_ptr);
 
-  MALLOCARRAY(png_image, info_ptr->height);
+  MALLOCARRAY(png_image, png_get_image_height(png_ptr, info_ptr));
   if (png_image == NULL) {
     png_destroy_read_struct (&png_ptr, &info_ptr, (png_infopp)NULL);
     pm_closer (ifp);
     pm_error ("couldn't allocate space for image");
   }
 
-  if (info_ptr->bit_depth == 16)
-    linesize = 2 * info_ptr->width;
+  if (png_get_bit_depth(png_ptr, info_ptr) == 16)
+    linesize = 2 * png_get_image_width(png_ptr, info_ptr);
   else
-    linesize = info_ptr->width;
+    linesize = png_get_image_width(png_ptr, info_ptr);
 
-  if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
+  if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY_ALPHA)
     linesize *= 2;
   else
-  if (info_ptr->color_type == PNG_COLOR_TYPE_RGB)
+  if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB)
     linesize *= 3;
   else
-  if (info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
+  if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB_ALPHA)
     linesize *= 4;
 
-  for (y = 0 ; y < info_ptr->height ; y++) {
+  for (y = 0 ; y < png_get_image_height(png_ptr, info_ptr) ; y++) {
     png_image[y] = malloc (linesize);
     if (png_image[y] == NULL) {
       for (x = 0 ; x < y ; x++)
@@ -637,32 +658,32 @@
     }
   }
 
-  if (info_ptr->bit_depth < 8)
+  if (png_get_bit_depth(png_ptr, info_ptr) < 8)
     png_set_packing (png_ptr);
 
-  if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) {
+  if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_PALETTE) {
     maxval = 255;
   } else {
-    maxval = (1l << info_ptr->bit_depth) - 1;
+    maxval = (1l << png_get_bit_depth(png_ptr, info_ptr)) - 1;
   }
 
   /* gamma-correction */
   if (displaygamma != -1.0) {
-    if (info_ptr->valid & PNG_INFO_gAMA) {
-      if (displaygamma != info_ptr->gamma) {
-        png_set_gamma (png_ptr, displaygamma, info_ptr->gamma);
-	totalgamma = (double) info_ptr->gamma * (double) displaygamma;
+    double gamma = 1.0;
+    png_get_gAMA(png_ptr, info_ptr, &gamma);
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_gAMA)) {
+      if (displaygamma != gamma) {
+        png_set_gamma (png_ptr, displaygamma, gamma);
+	totalgamma = (double) gamma * (double) displaygamma;
 	/* in case of gamma-corrections, sBIT's as in the PNG-file are not valid anymore */
-	info_ptr->valid &= ~PNG_INFO_sBIT;
         if (verbose)
           pm_message ("image gamma is %4.2f, converted for display gamma of %4.2f",
-                    info_ptr->gamma, displaygamma);
+                    gamma, displaygamma);
       }
     } else {
-      if (displaygamma != info_ptr->gamma) {
+      if (displaygamma != gamma) {
 	png_set_gamma (png_ptr, displaygamma, 1.0);
 	totalgamma = (double) displaygamma;
-	info_ptr->valid &= ~PNG_INFO_sBIT;
 	if (verbose)
 	  pm_message ("image gamma assumed 1.0, converted for display gamma of %4.2f",
 		      displaygamma);
@@ -678,17 +699,22 @@
      so we will use the sBIT info only for transparency, if we know that only
      solid and fully transparent is used */
 
-  if (info_ptr->valid & PNG_INFO_sBIT) {
+  if (png_get_valid(png_ptr, info_ptr, PNG_INFO_sBIT)) {
+    png_color_8 *sig_bit;
+    png_get_sBIT(png_ptr, info_ptr, &sig_bit);
     switch (alpha) {
       case mix:
-        if (info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA ||
-            info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
+        if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB_ALPHA ||
+            png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY_ALPHA)
           break;
-        if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
-            (info_ptr->valid & PNG_INFO_tRNS)) {
+        if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_PALETTE &&
+            (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS))) {
           trans_mix = TRUE;
-          for (i = 0 ; i < info_ptr->num_trans ; i++)
-            if (info_ptr->trans[i] != 0 && info_ptr->trans[i] != 255) {
+          png_byte *trans;
+          int num_trans = 0;
+          png_get_tRNS(png_ptr, info_ptr, &trans, &num_trans, NULL);
+          for (i = 0 ; i < num_trans ; i++)
+            if (trans[i] != 0 && trans[i] != 255) {
               trans_mix = FALSE;
               break;
             }
@@ -699,62 +725,65 @@
         /* else fall though to normal case */
 
       case none:
-        if ((info_ptr->color_type == PNG_COLOR_TYPE_PALETTE ||
-             info_ptr->color_type == PNG_COLOR_TYPE_RGB ||
-             info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA) &&
-            (info_ptr->sig_bit.red != info_ptr->sig_bit.green ||
-             info_ptr->sig_bit.red != info_ptr->sig_bit.blue) &&
+        if ((png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_PALETTE ||
+             png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB ||
+             png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB_ALPHA) &&
+            (sig_bit->red != sig_bit->green ||
+             sig_bit->red != sig_bit->blue) &&
             alpha == none) {
 	  pm_message ("different bit depths for color channels not supported");
-	  pm_message ("writing file with %d bit resolution", info_ptr->bit_depth);
+	  pm_message ("writing file with %d bit resolution", png_get_bit_depth(png_ptr, info_ptr));
 	  *errorlevelP = PNMTOPNG_WARNING_LEVEL;
         } else {
-          if ((info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) &&
-	      (info_ptr->sig_bit.red < 255)) {
-	    for (i = 0 ; i < info_ptr->num_palette ; i++) {
-	      info_ptr->palette[i].red   >>= (8 - info_ptr->sig_bit.red);
-	      info_ptr->palette[i].green >>= (8 - info_ptr->sig_bit.green);
-	      info_ptr->palette[i].blue  >>= (8 - info_ptr->sig_bit.blue);
+          if ((png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_PALETTE) &&
+	      (sig_bit->red < 255)) {
+	    int num_palette = 0;
+	    png_color *palette;
+	    png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);
+	    for (i = 0 ; i < num_palette ; i++) {
+	      palette[i].red   >>= (8 - sig_bit->red);
+	      palette[i].green >>= (8 - sig_bit->green);
+	      palette[i].blue  >>= (8 - sig_bit->blue);
 	    }
-	    maxval = (1l << info_ptr->sig_bit.red) - 1;
+	    maxval = (1l << sig_bit->red) - 1;
 	    if (verbose)
 	      pm_message ("image has fewer significant bits, "
                       "writing file with %d bits per channel", 
-		info_ptr->sig_bit.red);
+		sig_bit->red);
           } else
-          if ((info_ptr->color_type == PNG_COLOR_TYPE_RGB ||
-               info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA) &&
-	      (info_ptr->sig_bit.red < info_ptr->bit_depth)) {
-	    png_set_shift (png_ptr, &(info_ptr->sig_bit));
-	    maxval = (1l << info_ptr->sig_bit.red) - 1;
+          if ((png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB ||
+               png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB_ALPHA) &&
+	      (sig_bit->red < png_get_bit_depth(png_ptr, info_ptr))) {
+	    png_set_shift (png_ptr, sig_bit);
+	    maxval = (1l << sig_bit->red) - 1;
 	    if (verbose)
 	      pm_message ("image has fewer significant bits, "
                       "writing file with %d bits per channel", 
-		info_ptr->sig_bit.red);
+		sig_bit->red);
           } else 
-          if ((info_ptr->color_type == PNG_COLOR_TYPE_GRAY ||
-               info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) &&
-	      (info_ptr->sig_bit.gray < info_ptr->bit_depth)) {
-	    png_set_shift (png_ptr, &(info_ptr->sig_bit));
-	    maxval = (1l << info_ptr->sig_bit.gray) - 1;
+          if ((png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY ||
+               png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY_ALPHA) &&
+	      (sig_bit->gray < png_get_bit_depth(png_ptr, info_ptr))) {
+	    png_set_shift (png_ptr, sig_bit);
+	    maxval = (1l << sig_bit->gray) - 1;
 	    if (verbose)
 	      pm_message ("image has fewer significant bits, "
                       "writing file with %d bits",
-		info_ptr->sig_bit.gray);
+		sig_bit->gray);
           }
         }
         break;
 
       case alpha_only:
-        if ((info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA ||
-             info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) && 
-	    (info_ptr->sig_bit.gray < info_ptr->bit_depth)) {
-	  png_set_shift (png_ptr, &(info_ptr->sig_bit));
+        if ((png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB_ALPHA ||
+             png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY_ALPHA) && 
+	    (sig_bit->gray < png_get_bit_depth(png_ptr, info_ptr))) {
+	  png_set_shift (png_ptr, sig_bit);
 	  if (verbose)
 	    pm_message ("image has fewer significant bits, "
                     "writing file with %d bits", 
-		info_ptr->sig_bit.alpha);
-	  maxval = (1l << info_ptr->sig_bit.alpha) - 1;
+		sig_bit->alpha);
+	  maxval = (1l << sig_bit->alpha) - 1;
         }
         break;
 
@@ -763,24 +792,32 @@
 
   /* didn't manage to get libpng to work (bugs?) concerning background */
   /* processing, therefore we do our own using bgr, bgg and bgb        */
-  if (info_ptr->valid & PNG_INFO_bKGD)
-    switch (info_ptr->color_type) {
+  if (png_get_valid(png_ptr, info_ptr, PNG_INFO_bKGD)) {
+    png_color_16 *background;
+    png_get_bKGD(png_ptr, info_ptr, &background);
+    switch (png_get_color_type(png_ptr, info_ptr)) {
       case PNG_COLOR_TYPE_GRAY:
       case PNG_COLOR_TYPE_GRAY_ALPHA:
-        bgr = bgg = bgb = gamma_correct (info_ptr->background.gray, totalgamma);
+        bgr = bgg = bgb = gamma_correct (background->gray, totalgamma);
         break;
       case PNG_COLOR_TYPE_PALETTE:
-        bgr = gamma_correct (info_ptr->palette[info_ptr->background.index].red, totalgamma);
-        bgg = gamma_correct (info_ptr->palette[info_ptr->background.index].green, totalgamma);
-        bgb = gamma_correct (info_ptr->palette[info_ptr->background.index].blue, totalgamma);
+	{
+	  int num_palette;
+	  png_color *palette;
+	  png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);
+          bgr = gamma_correct (palette[background->index].red, totalgamma);
+          bgg = gamma_correct (palette[background->index].green, totalgamma);
+          bgb = gamma_correct (palette[background->index].blue, totalgamma);
+        }
         break;
       case PNG_COLOR_TYPE_RGB:
       case PNG_COLOR_TYPE_RGB_ALPHA:
-        bgr = gamma_correct (info_ptr->background.red, totalgamma);
-        bgg = gamma_correct (info_ptr->background.green, totalgamma);
-        bgb = gamma_correct (info_ptr->background.blue, totalgamma);
+        bgr = gamma_correct (background->red, totalgamma);
+        bgg = gamma_correct (background->green, totalgamma);
+        bgb = gamma_correct (background->blue, totalgamma);
         break;
     }
+  }
   else
     /* when no background given, we use white [from version 2.37] */
     bgr = bgg = bgb = maxval;
@@ -790,7 +827,7 @@
   if (background)
   {
     backcolor = ppm_parsecolor (background, maxval);
-    switch (info_ptr->color_type) {
+    switch (png_get_color_type(png_ptr, info_ptr)) {
       case PNG_COLOR_TYPE_GRAY:
       case PNG_COLOR_TYPE_GRAY_ALPHA:
         bgr = bgg = bgb = PNM_GET1 (backcolor);
@@ -813,16 +850,15 @@
        completes.  That's because it comes from chunks that are at the
        end of the stream.
     */
-    dump_png_info(info_ptr);
+    dump_png_info(png_ptr, info_ptr);
 
   if (mtime)
-    show_time (info_ptr);
+    show_time (png_ptr, info_ptr);
   if (tfp)
-    save_text (info_ptr, tfp);
+    save_text (png_ptr, info_ptr, tfp);
 
-  if (info_ptr->valid & PNG_INFO_pHYs) {
-    float r;
-    r = (float)info_ptr->x_pixels_per_unit / info_ptr->y_pixels_per_unit;
+  if (png_get_valid(png_ptr, info_ptr, PNG_INFO_pHYs)) {
+    float r = png_get_pixel_aspect_ratio(png_ptr, info_ptr);
     if (r != 1.0) {
       pm_message ("warning - non-square pixels; "
                   "to fix do a 'pamscale -%cscale %g'",
@@ -833,15 +869,18 @@
   }
 
   if (alpha == alpha_only) {
-    if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY ||
-        info_ptr->color_type == PNG_COLOR_TYPE_RGB) {
+    if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY ||
+        png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB) {
       pnm_type = PBM_TYPE;
     } else
-      if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) {
+      if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_PALETTE) {
         pnm_type = PBM_TYPE;
-        if (info_ptr->valid & PNG_INFO_tRNS) {
-          for (i = 0 ; i < info_ptr->num_trans ; i++) {
-            if (info_ptr->trans[i] != 0 && info_ptr->trans[i] != maxval) {
+        if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
+          int num_trans;
+          png_byte *trans;
+          png_get_tRNS(png_ptr, info_ptr, &trans, &num_trans, NULL);
+          for (i = 0 ; i < num_trans ; i++) {
+            if (trans[i] != 0 && trans[i] != maxval) {
               pnm_type = PGM_TYPE;
               break;
             }
@@ -854,18 +893,21 @@
           pnm_type = PGM_TYPE;
       }
   } else {
-    if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY ||
-        info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {
-      if (info_ptr->bit_depth == 1) {
+    if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY ||
+        png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY_ALPHA) {
+      if (png_get_bit_depth(png_ptr, info_ptr) == 1) {
         pnm_type = PBM_TYPE;
       } else {
         pnm_type = PGM_TYPE;
       }
     } else
-    if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) {
+    if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_PALETTE) {
+      int num_palette;
+      png_color *palette;
+      png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);
       pnm_type = PGM_TYPE;
-      for (i = 0 ; i < info_ptr->num_palette ; i++) {
-        if (iscolor (info_ptr->palette[i])) {
+      for (i = 0 ; i < num_palette ; i++) {
+        if (iscolor (palette[i])) {
           pnm_type = PPM_TYPE;
           break;
         }
@@ -881,10 +923,10 @@
     maxmaxval = PPM_OVERALLMAXVAL;
   else maxmaxval = maxval;
 
-  writePnm(stdout, maxval, pnm_type, info_ptr, png_image);
+  writePnm(stdout, maxval, pnm_type, png_ptr, info_ptr, png_image);
 
   fflush(stdout);
-  for (y = 0 ; y < info_ptr->height ; y++)
+  for (y = 0 ; y < png_get_image_height(png_ptr, info_ptr) ; y++)
     free (png_image[y]);
   free (png_image);
   png_destroy_read_struct (&png_ptr, &info_ptr, (png_infopp)NULL);
