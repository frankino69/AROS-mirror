====
acpi
====

.. This document is automatically generated. Don't edit it!

`Index <index>`_

----------

======================================= ======================================= ======================================= ======================================= 
`ACPI_FindSDT()`_                       `ACPI_ReadReg()`_                       `ACPI_ScanEntries()`_                   `ACPI_ScanSDT()`_                       
`ACPI_WriteReg()`_                      
======================================= ======================================= ======================================= ======================================= 

-----------

ACPI_FindSDT()
==============

Synopsis
~~~~~~~~
::

 APTR ACPI_FindSDT(
          ULONG id );

Function
~~~~~~~~
::

     Locate a system description table with a given 4-character ID


Inputs
~~~~~~
::

     id - a table ID (use ACPI_MAKE_ID() macro to get it)


Result
~~~~~~
::

     A pointer to a table or NULL if can't be found


Notes
~~~~~
::

     Some systems may include duplicating tables, often it's MADT.
     In this case a table with the latest revision number will
     be returned.



----------

ACPI_ReadReg()
==============

Synopsis
~~~~~~~~
::

 IPTR ACPI_ReadReg(
          struct GENERIC_ACPI_ADDR * reg );

Function
~~~~~~~~
::

     Read a value from the register specified by GAS


Inputs
~~~~~~
::

     reg - a pointer to a generic address structure


Result
~~~~~~
::

     A value read from the register


Notes
~~~~~
::

     Only memory and I/O spaces are supported.
     64-bit registers are supported only in memory space and only on 64-bit platforms.
     The given GAS must address a complete register, not a data structure.



----------

ACPI_ScanEntries()
==================

Synopsis
~~~~~~~~
::

 ULONG ACPI_ScanEntries(
          struct ACPI_TABLE_DEF_HEADER * table,
          WORD type,
          const struct Hook * hook,
          APTR userdata );

Function
~~~~~~~~
::

     Scan entries with the given type in the given table.
     The supplied hook will be called for each entry 


Inputs
~~~~~~
::

     table    - a pointer to a table to scan
     type     - type of entries needed, or ACPI_ENTRY_TYPE_ALL to
                 enumerate all entries
     hook     - a hook to call. The hook will be called with 'object'
                argument set to entry pointer, and 'paramPacket' set to
                'userdata' argument. You can pass a NULL here in order just
                to count the number of entries.
     userdata - a user-supplied data to pass to the hook.


Result
~~~~~~
::

     Total number of processed entries. The entry is considered processed if
     either supplied hook returns nonzero value, or there's no hook supplied.



----------

ACPI_ScanSDT()
==============

Synopsis
~~~~~~~~
::

 ULONG ACPI_ScanSDT(
          ULONG id,
          const struct Hook * hook,
          APTR userdata );

Function
~~~~~~~~
::

     Scan multiple system description tables with the given signature.


Inputs
~~~~~~
::

     id       - a signature of the table(s) to scan. Supply ACPI_ID_ALL
                to enumerate all tables.
     hook     - a hook to call. The hook will be called with 'object'
                argument set to table pointer, and 'paramPacket' set to
                'userdata' argument. You can pass a NULL here in order just
                to count the number of tables.
     userdata - a user-supplied data to pass to the hook.


Result
~~~~~~
::

     Total number of processed tables. The table is considered processed if
     either supplied hook returns nonzero value, or there's no hook supplied.


Notes
~~~~~
::

     Root tables, containing no data but only pointers to other tables
     (like RSDT and XSDT) are not included in the scan.



See also
~~~~~~~~

`ACPI_FindSDT()`_ 

----------

ACPI_WriteReg()
===============

Synopsis
~~~~~~~~
::

 void ACPI_WriteReg(
          struct GENERIC_ACPI_ADDR * reg,
          IPTR value );

Function
~~~~~~~~
::

     Write a value from the register specified by GAS


Inputs
~~~~~~
::

     reg   - a pointer to a generic address structure
     value - a value to write to the register


Result
~~~~~~
::

     None


Notes
~~~~~
::

     Only memory and I/O spaces are supported.
     64-bit registers are supported only in memory space and only on 64-bit platforms.
     The given GAS must address a complete register, not a data structure.



